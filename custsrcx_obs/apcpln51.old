        REM *************************************************************~
            *     ***** TEST VERSION IN -- (APCPLN51)  ******           *~
            *  Program Name      - APCPLN47                             *~
            *  Creation Date     - 12/17/96                             *~
            *  Last Modified Date- 08/27/97                             *~
            *  Written By        - Royal H. Hoffman                     *~
            *                                                           *~
            *  Description       - This Program Creates the Screen      *~
            *                      labels and the Screen report.        *~
            *                                                           *~
            * System Screen Tables - Old Tables Not Used                *~
            *        (SCREEN01) - Screen Models for Two Labels          *~
            *        (SCREEN02) - Models with No Screen                 *~
            *        (SCREEN03) - Special Screen 1/3,1/3,1/3            *~
            *        (GLASS05)  - Table for '8' Series with Screen      *~
            *                                                           *~
            * New    Screen Tables                                      *~
            *        (SCREEN04) - Screen Master Control Table A thru E  *~
            *                     MMM - C     MMM = Model Code          *~
            *                                  -  = At Position (5)     *~
            *                                  C  = Code (A thru E)     *~
            *        (GLASS01 ) - Screen Quantities Only D's            *~
            *                     TT-BB       TT  = Not Applicable      *~
            *                                  -  = At Position (27)    *~
            *                                 BB  = No of Screens       *~
            *        (SCREEN06) - Specified Screen Constant             *~
            *                     HH.HHHH  - FF.FFFF                    *~
            *                                 HH.HHHH = Half Scr Const. *~
            *                                   -     = At Position (10)*~
            *                                 FF.FFFF = Full Scr Const. *~
            * (Old)  (SCREEN05) - Department Batch Size and Sort        *~
            *                     CC = BBB S -< Dept Description >      *~
            *                                 CC  = Sub Script to IDX$()*~
            *                                 BBB = No. for Batch Size  *~
            *                                 S   = Sort Code(A-Z)(0-9) *~
            *                                 < > = Dept Description    *~
            *                                                           *~
            *        (SCREEN07) - Department Batch Size and Sort        *~
            *                     CCC - DDD  BBBB                       *~
            *                                 CCC = Sub Script by Order *~
            *                                       Read into Array     *~
            *                                 DDD = Department Code     *~
            *                                 BBBB= Batch Size for Dept *~
            *                                                           *~
            * Notes - Need Hinge Code for Codes (C) and (D)             *~
            *       - Code (E) = No Screen                              *~
            *       - When Specified Use tabel (SCREEN06)               *~
            *                                                           *~
            *-----------------------------------------------------------*~
            *  Screen Array  = SS$()20                                  *~
            *   Position ( 1 for  1) = Screen Control Code              *~
            *            ( 2 for  2) = NO = Normal, CO = Cottage,       *~
            *                          OR = Oriel, SP = Specified       *~
            *            ( 4 for  1) = H = Half, F = Full Screen        *~
            *                          4 = 1/4,1/2,1/4 - 3 = 1/3,1/3,1/3*~
            *            ( 5 for  4) = Width Phantom                    *~
            *            ( 9 for  4) = Height Phantom or (TABL)         *~
            *            (13 for  4) = CB Cut Length Phantom            *~
            *            (17 for  4) = CB Location Phantom /(TABL)(CTRS)*~
            *                                                           *~
            *-----------------------------------------------------------*~
            *                  M O D I F I C A T I O N S                *~
            *---WHEN---+----------------WHAT----------------------+-WHO-*~
            * 12/17/96 ! New Program for (APC) - LAST MOD DATE    ! RHH *~
            *          !   Contains all the Modification that are !     *~
            *          !   in APCGLS06, and the following         !     *~
            * 12/17/96 ! New Planning Version of Screens          ! RHH *~
            * 06/06/97 ! Modes for New Family of windows and Two  ! RHH *~
            *          !   ne Dept's (049) and (052).             !     *~
            * 07/07/97 ! Skip the following Dept's for Screen's   ! RHH *~
            *          !   (023), (042), (056) Will not be Passed !     *~
            *          !   to Screen Dept. Sub 'CHECK_SUPPORT'    !     *~
            * 08/27/97 ! New Sort and Select Routine for screens. ! RHH *~
            *          !   Sort is in Conjunction with Production !     *~
            *          !   departments. Uses DT_INDEX$ - APCPLNDT !     *~
            *************************************************************

        dim                              /* FILE = AMTBOMCD            */~
            ht2$9,                       /* Center Bar Location        */~
            phantom$25                   /* Phantom Designator         */

        dim                              /* FILE = APCPLNDT            */~
            dt_rec$256,                  /* Detail Record              */~
            dt_key1$57,                  /* Alt - Bar Code Key         */~
            dt_dept$3,                   /* Department Code            */~
            dt_load$5,                   /* Load Number                */~
            dt_part$25, dt_wood$3,       /* Prod/Comp Seq. (0) or (1)  */~
            dt_desc$30, dt_so$8,         /* Prod/Comp Date (0) or (1)  */~
            dt_seq$5, dt_index$30,       /* Production Sort Index      */~
            dt_shft$2, scr_shft$2,       /* DESCRIPTION                */~
            dt_special$10,               /* S.O. Special Flags         */~
            dt_ref$8,                    /* REF / WARRANTY             */~
            dt_samp$1,                   /* 0=NO, 1=SAMP, 2=DISP       */~
            scr_shft_d$30                /*                            */

        dim                              /* FILE - (APCPLNW1)          */~
            wrk_key$60,                  /* WRK PRIMARY KEY            */~
            wrk_rec$60,                  /* WORK RECORD                */~
            wrk_rec1$128,                /* WORK RECORD                */~
            wrk_fil$46,                  /* FILLER                     */~
            lab_key$65,                  /* Gl and Sc Primary Key      */~
            lab_rec$200,                 /* Gl and Sc Label Record     */~
            lab_fil$9,                   /*                            */~
            wd$7,                        /* Actual Width               */~
            ht$6,                        /* Actual Height              */~
            txt_flag$1,                  /* Special Text Exists        */~
            sav_part$25                  /* Save Part Number           */


        dim                              /* (Program Variables)        */~
            wt$3,                        /* Window Type Code           */~
            wcode$1,                     /* Window Code (A) thru (E)   */~
            sav_screen$25,               /* Used by 'CHECK_SCREEN'     */~
            skey$4,                      /* Equation Type Key          */~
            sqty$2,                      /* Screen Quantity-No. Screens*/~
            special$1,                   /* '0'=N/A, '1'=Specified Clmr*/~
            ph$(4%)4,                    /* Possible (4) Phantoms/Scr  */~
            err$(10%)60,                 /* Pre-defined Error Messages */~
            hdr$40, msg$(3%)79,          /* ASKUSER TEXT               */~
            qty$5,                       /* QUANTITY                   */~
            grid$25,                     /* Description of Grid        */~
            screen_dte$8,                /* Screen Comp Date Formated  */~
            screen_dte1$8,               /* Screen Comp Date Unformated*/~
            sze$(10%)3,                  /* Save Eights                */~
            sze1$(20%)5,                 /* Save Sixteenths            */~
            wd1$9,                       /* Calculated Width           */~
            wd2$9,                       /* CLMR FOR SCREEN            */~
            ht1$8,                       /* Calculated Height          */~
            readkey$30,                  /* GENCODES Look-Up Key       */~
            scr$(10%)40, ss$(20%)20,     /* Screen Text Messages       */~
            scr_dte$8,                   /* Screen Completion Date FORM*/~
            scr_dte1$8,                  /* Screen Comp. Date Unform   */~
            scr_code$1,                  /* Screen Report Selection    */~
            scr_dept$3, scr_prod$1,      /* Screen Department Code     */~
            scr_msg$30,                  /* Screen - Report Selection  */~
            scr_msg1$30, l_txt$25,       /* Screen - Product Line      */~
            scr_load$5, scr_desc$30,     /* Screen - Load Number       */~
            descr$30,   stk_so$8,        /* Use for GENCODES Look-Up   */~
            batch_amt$4,                 /* Batch Sizes from Table     */~
            dept_scr$1,                  /* Dept Sort Code             */~
            sav_dept_scr$1,              /* Dept Sort Code             */~
            dept$(50%)3,                 /* Store Department Codes     */~
            sort$50,                     /* Store Sort Codes 0-9,A-Z   */~
            batch%(50%,6%),              /* Batch Sorting Array        */~
            cursor%(2%),                 /* Cursor location for edit   */~
            date$8,                      /* Date for screen display    */~
            rpt_time$8,                  /* Report Time                */~
            edtmessage$79,               /* Edit screen message        */~
            errormsg$79,                 /* Error message              */~
            i$(24%)80,                   /* Screen Image               */~
            inpmessage$79,               /* Informational Message      */~
            lfac$(20%)1,                 /* Field Attribute Characters */~
            pf$(3%)79,                   /* PF Screen Literals         */~
            pfkeys$32,                   /* PF Key Hex Values          */~
            userid$3                     /* Current User Id            */

        dim f2%(15%),                    /* = 0 if the file is open    */~
            f1%(15%),                    /* = 1 if READ was successful */~
            fs%(15%),                    /* = 1 if file open, -1 if it */~
            rslt$(15%)20                 /* Text from file opening     */

        dim                              /* FILE - (TEXTFILE)          */~
            textid$4                     /* S.O. TEXTID$               */

        dim                              /* FILE - (NEW LABEL VARS)    */~
            model$3,                     /* MODEL CODE                 */~
            cl$1, cl_l$2, color$6,       /* COLOR CODE                 */~
            gl$2,                        /* GLASS CODE                 */~
            lt$2, co_or$8,               /* LITING CODE                */~
            hg$2, hnge$6, hg_l$8, hh$8,  /* HINGE CODE                 */~
            sc$1, sc_l$4, sc_r$20,       /* SCREEN CODES               */~
            lk$1,                        /* LOCK CODES                 */~
            width$4,                     /* WIDTH                      */~
            height$3,                    /* HEIGHT                     */~
            clmr$3,                      /* CENTER LINE MEETING RAIL   */~
            wallw$3                      /* WALL WIDTH                 */

        dim                              /* FILE - Screen Explosion    */~
            cut$(4%)62,                  /* Max (4) Screens            */~
            txt$(3%)50                   /* Screen '102 Header Text    */

        REM *************************************************************~
            *                  Release Version ID Section               *~
            *************************************************************
            dim apc$41, pname$21
            apc$   = "(New)Planning Screen Processing Utility  "
            pname$ = "APCPLN47 - Rev: 01.00"

        REM *************************************************************

            mat f2% = con

                     /* The variable F2%() should not be modified.     */
                     /* FS%() also should not be modified (see         */
                     /* OPENCHCK).                                     */

        REM *************************************************************~
            *                  S E L E C T   F I L E S                  *~
            *                                                           *~
            *-----+----------+------------------------------------------*~
            *FILE#!  PRNAME  ! D E S C R I P T I O N                    *~
            *-----+----------+------------------------------------------*~
            * #1 ! AMTBOMCD ! Master Equation File                      *~
            * #2 ! APCPLNDT ! Production Master Detail File             *~
            * #3 ! GENCODES ! Master System Table File                  *~
            * #4 ! AMTBOMIF ! Lineal Equation Info File                 *~
            * #5 ! APCPLNW1 ! Screen Work File for (Reports)            *~
            * #6 ! APCPLNW2 ! Screen Work File for (Labels)             *~
            * #7 ! HNYMASTR ! Inventory Master File                     *~
            * #8 ! APCCUTEQ ! Lineal Mate Equation Definitions          *~
            * #9 ! TEXTFILE ! Master Text File                          *~
            * #10! BCKLINES ! Sales Order Line Items                    *~
            *************************************************************~
            *       File Selection and Open Calls                       *~
            *************************************************************

            select #1,  "AMTBOMCD",                                      ~
                        varc,     indexed,  recsize = 250,               ~
                        keypos = 1,    keylen = 42

            select #2,   "APCPLNDT",                                     ~
                        varc,     indexed,  recsize = 256,               ~
                        keypos =   24, keylen =   23,                    ~
                        alt key  1, keypos =   47, keylen =  57,         ~
                            key  2, keypos  =  53, keylen =  51,         ~
                            key  3, keypos  =   1, keylen =  23, dup,    ~
                            key  4, keypos  =  96, keylen =   8, dup

            select #3,  "GENCODES",                                      ~
                        varc,     indexed,  recsize =  128,              ~
                        keypos =    1, keylen =  24

            select #4,  "AMTBOMIF",                                      ~
                        varc,     indexed,  recsize =  120,              ~
                        keypos =    1, keylen =  32                      ~



            select #5,  "APCPLNW1",                                      ~
                        varc,     indexed,  recsize =   128,             ~
                        keypos =    1, keylen =   60

            select #6,  "APCPLNW2",                                      ~
                        varc,     indexed,  recsize =   200,             ~
                        keypos =    1, keylen =   65

            select #7,  "HNYMASTR",                                      ~
                        varc,     indexed,  recsize =  900,              ~
                        keypos =  1,   keylen =  25,                     ~
                        alt key  1, keypos  =   102, keylen =  9, dup,   ~
                            key  2, keypos  =    90, keylen =  4, dup,   ~
                            key  3, keypos  =    26, keylen = 32, dup

            select #8,  "APCCUTEQ",                                      ~
                        varc,     indexed,  recsize =   32,              ~
                        keypos =    2, keylen =   7,                     ~
                        alt key  1, keypos  =     1, keylen =  8

            select #9,  "TXTFILE",                                       ~
                        varc,     indexed,  recsize =  2024,             ~
                        keypos =   1, keylen =  11

            select #10, "BCKLINES",                                      ~
                        varc,     indexed,  recsize =  300,              ~
                        keypos =   10, keylen =  19

            call "SHOSTAT" ("Opening Files, One Moment Please")
            call "OPENCHCK" (#1,  fs%(1%), f2%(1%),  0%, rslt$(1%))
            call "OPENCHCK" (#2,  fs%(2%), f2%(2%),  0%, rslt$(2%))
            call "OPENCHCK" (#3,  fs%(3%), f2%(3%),  0%, rslt$(3%))
            call "OPENCHCK" (#4,  fs%(4%), f2%(4%),  0%, rslt$(4%))
            call "OPENCHCK" (#7,  fs%(7%), f2%(7%),  0%, rslt$(7%))
            call "OPENCHCK" (#8,  fs%(8%), f2%(8%),  0%, rslt$(8%))
            call "OPENCHCK" (#9,  fs%(9%), f2%(9%),  0%, rslt$(9%))
            call "OPENCHCK" (#10, fs%(10), f2%(10),  0%, rslt$(10))
            mat f1% = zer

        REM *************************************************************~
            *                I N I T I A L I Z A T I O N                *~
            *-----------------------------------------------------------*~
            * Initializes information necessary for program.            *~
            *************************************************************
            call "EXTRACT" addr("ID", userid$)
            date$ = date
            call "DATEFMT" (date$)
            edtmessage$  = "To Modify Displayed Values, Position Cursor"&~
                           " to Desired Value & Press (RETURN)."

            scr$( 1%) = "****************************************"
            scr$( 2%) = "*        Consolidated Screen           *"
            scr$( 3%) = "*                                      *"
            scr$( 4%) = "* (1) - Calculate MFG Part Screen Sizes*"
            scr$( 5%) = "* (2) - Screen Report/Labels           *"
            scr$( 6%) = "* (3) - Linealmate                     *"
            scr$( 7%) = "*                                      *"
            scr$( 8%) = "*                                      *"
            scr$( 9%) = "****************************************"

        REM - NEAREST 8TH INCH    - NEAREST 16TH INCH
            sze$(1%)  = "1/8"    : sze1$( 1%) = " 1/16"
            sze$(2%)  = "1/4"    : sze1$( 2%) = " 1/8 "
            sze$(3%)  = "3/8"    : sze1$( 3%) = " 3/16"
            sze$(4%)  = "1/2"    : sze1$( 4%) = " 1/4 "
            sze$(5%)  = "5/8"    : sze1$( 5%) = " 5/16"
            sze$(6%)  = "3/4"    : sze1$( 6%) = " 3/8 "
            sze$(7%)  = "7/8"    : sze1$( 7%) = " 7/16"
            sze$(8%)  = "ERR"    : sze1$( 8%) = " 1/2 "
            sze$(9%)  = "   "    : sze1$( 9%) = " 9/16"
                                   sze1$(10%) = " 5/8 "
                                   sze1$(11%) = "11/16"
                                   sze1$(12%) = " 3/4 "
                                   sze1$(13%) = "13/16"
                                   sze1$(14%) = " 7/8 "
                                   sze1$(15%) = "15/16"
                                   sze1$(16%) = "     "

            ss$( 1%) = "ANOH4001400300000000"
            ss$( 2%) = "ANOF4101410340004200"
            ss$( 3%) = "ACOH4001401300000000"
            ss$( 4%) = "ACOF4101410340004210"
            ss$( 5%) = "AORH4001402300000000"
            ss$( 6%) = "AORF4101410340004220"
            ss$( 7%) = "ASPH4001TABL00000000"      /* SCREEN06 - LEFT  */
            ss$( 8%) = "ASPF410141034000TABL"      /* SCREEN06 - RIGHT */

            ss$( 9%) = "BNOH4001400300000000"
            ss$(10%) = "BNOF410141034000CTRS"

            ss$(11%) = "CNO44001400300000000"      /* 1/4, 1/2, 1/4    */
            ss$(12%) = "CNO34004400300000000"      /* 1/3, 1/3, 1/3    */

            ss$(13%) = "DNOH4001400300000000"      /* GLASS01          */

            ss_max% = 13%

            err$(1%) =                                                   ~
           "Err(1) - MFG Not found in Table (SCREEN04) ??               "
            err$(2%) =                                                   ~
           "Err(2) - Screen Quantities not found in Table (GLASS01) ??  "
            err$(3%) =                                                   ~
           "Err(3) - Screen Special Constant not found in (SCREEN06) ?? "
            err$(4%) =                                                   ~
           "Err(4) - Unable to Load Specified Phantom Number ??         "
            err$(5%) =                                                   ~
           "Err(5) - Screen Equation Not on File ??                     "
            err$(6%) =                                                   ~
           "Err(6) - No Equation and No Data on File ??                 "
            err$(7%) =                                                   ~
           "                                                            "
        REM *************************************************************~
            *       I N P U T   M O D E   M A I N   P R O G R A M       *~
            *-----------------------------------------------------------*~
            * Handles normal input for data entry screens.              *~
            *************************************************************

        inputmode
            gosub initialize_variables

            for fieldnr% = 1% to  5%
L10100:         gosub'051(fieldnr%)        /* Default / Enables */
                      if enabled% = 0% then L10220
L10120:         gosub'101(fieldnr%, 1%)    /* Display / Accept  */
                      if keyhit%  =  1% then gosub startover
                      if keyhit% <>  4% then       L10200
L10150:                  fieldnr% = max(1%, fieldnr% - 1%)
                         gosub'051(fieldnr%)
                         if enabled% = 1% then L10120
                         if fieldnr% = 1% then L10100
                         goto L10150
L10200:               if keyhit% = 16% and fieldnr% = 1% then exit_program
                      if keyhit% <> 0% then       L10120
L10220:         gosub'151(fieldnr%)     /* Edit Field for Valid Entry */
                      if errormsg$ <> " " then L10120
            next fieldnr%
            goto editpg1
        inputmode_a
            for fieldnr% = 1% to  1%
L10280:         gosub'052(fieldnr%)        /* Default / Enables */
                      if enabled% = 0% then L10400
L10300:         gosub'102(fieldnr%, 1%)    /* Display / Accept  */
                      if keyhit%  =  1% then gosub startover
                      if keyhit% <>  4% then       L10380
L10330:                  fieldnr% = max(1%, fieldnr% - 1%)
                         gosub'051(fieldnr%)
                         if enabled% = 1% then L10300
                         if fieldnr% = 1% then L10280
                         goto L10330
L10380:               if keyhit% = 16% then goto exit_program
                      if keyhit% <> 0% then       L10300
L10400:         gosub'152(fieldnr%)     /* Edit Field for Valid Entry */
                      if errormsg$ <> " " then L10300
            next fieldnr%
            goto editpg2

        REM *************************************************************~
            *        E D I T   M O D E   M A I N   P R O G R A M        *~
            *-----------------------------------------------------------*~
            * Handles operation of EDIT MODE for data entry screens.    *~
            *************************************************************

        editpg1
            lastfieldnr% = 0%
            gosub'101(0%, 2%)           /* Display Screen - No Entry   */
                  if keyhit%  =  1% then gosub startover
                  if keyhit%  = 16% then gosub begin_process
                  if keyhit% <>  0% then       editpg1
L11120:     fieldnr% = cursor%(1%) - 5%
            if fieldnr% < 1% or fieldnr% > 5% then editpg1
            if fieldnr% = lastfieldnr% then    editpg1
            gosub'051(fieldnr%)         /* Check Enables, Set Defaults */
                  if enabled% =  0% then       editpg1
L11170:     gosub'101(fieldnr%, 2%)     /* Display & Accept Screen     */
                  if keyhit%  =  1% then gosub startover
                  if keyhit% <>  0% then L11170
            gosub'151(fieldnr%)         /* Edit Field for Valid Entry  */
                  if errormsg$ <> " " then L11170
                  lastfieldnr% = fieldnr%
            goto L11120

        editpg2
            lastfieldnr% = 0%
            gosub'102(0%, 2%)           /* Display Screen - No Entry   */
                  if keyhit%  =  1% then gosub startover
                  if keyhit%  = 14% then gosub calc_data
                  if keyhit%  = 16% then goto  inputmode
                  if keyhit% <>  0% then       editpg2
L11310:     fieldnr% = cursor%(1%) - 7%
            if fieldnr% < 1% or fieldnr% > 1% then editpg2
            if fieldnr% = lastfieldnr% then    editpg2
            gosub'052(fieldnr%)         /* Check Enables, Set Defaults */
                  if enabled% =  0% then       editpg2
L11360:     gosub'102(fieldnr%, 2%)     /* Display & Accept Screen     */
                  if keyhit%  =  1% then gosub startover
                  if keyhit% <>  0% then L11360
            gosub'152(fieldnr%)         /* Edit Field for Valid Entry  */
                  if errormsg$ <> " " then L11360
                  lastfieldnr% = fieldnr%
            goto L11310

        REM *************************************************************~
            *             P R O C E S S   D A T A                       *~
            *-----------------------------------------------------------*~
            * Display Various Options                                   *~
            *************************************************************

        begin_process
             if scr_code% <> 1% then goto L19110
                return clear all
                goto inputmode_a

L19110:      call "SHOSTAT" ("Creating "& scr_msg$)
             gosub create_data

        return clear all
        goto inputmode

        REM *************************************************************~
            *     D E F A U L T / E N A B L E   F O R   P A G E   1     *~
            *-----------------------------------------------------------*~
            * Sets DEFAULTS and ENABLES fields for Screen  1  of Input. *~
            *************************************************************

        deffn'051(fieldnr%)
            enabled% = 1%
        return

        deffn'052(fieldnr%)
            enabled% = 1%
        return

        REM *************************************************************~
            *      I N I T I A L I Z E   I N P U T   M E S S A G ES     *~
            *-----------------------------------------------------------*~
            * Initializes Variable Field Input Messages                 *~
            *************************************************************

        deffn'050(scrnr%, fieldnr%)
            if fieldnr% <> 0% then L28110
                inpmessage$ = edtmessage$
                return

L28110
*        Define the Input Message for the Screen/Field Indicated
            if scrnr% = 1% then restore line = scrn1_msg, fieldnr%
            read inpmessage$      /* Read Input Message */
            return

        scrn1_msg  :  data                                               ~
         "Enter (1)Calculate Screen Sizes, (2)Screen Report/Labels.    ",~
         "Enter the Planned Production Date Associated with Screens.   ",~
         "Enter a Valid Dept Reference Code (1 thru 15) or All.        ",~
         "Enter a Valid Shift Code or AA = All?                        ",~
         "Enter a Valid Load Number.                                   "

        deffn'060(scrnr%, fieldnr%)
            if fieldnr% <> 0% then L28280
                inpmessage$ = edtmessage$
                return

L28280
*        Define the Input Message for the Screen/Field Indicated
            if scrnr% = 1% then restore line = scrn2_msg, fieldnr%
            read inpmessage$      /* Read Input Message */
            return

        scrn2_msg  :  data                                               ~
         "Enter a Valid Stock or Manufactured Part Number?              "

        REM *************************************************************~
            * V A R I A B L E   F I E L D   I N I T I A L I Z A T I O N *~
            *-----------------------------------------------------------*~
            * Initializes all defined screen variables to blank         *~
            *************************************************************
        initialize_variables
            init(" ") errormsg$, inpmessage$, scr_code$, scr_msg$,       ~
                      scr_dte$, scr_dte1$, scr_dept$, scr_msg1$,         ~
                      screen_dte$, screen_dte1$, scr_load$, scr_desc$,   ~
                      dt_part$, dt_desc$, scr_shft$, scr_shft_d$, cut$(),~
                      dt_wood$
            txt$(1) =                                                    ~
                "**************************************************"
            txt$(2) =                                                    ~
                "* (Calculate) Screen Size for Manufactured Parts *"
            txt$(3) =                                                    ~
                "**************************************************"
            gosub load_tables
        return

        REM *************************************************************~
            *************************************************************

        REM *************************************************************~
            * S T A R T   O V E R   L A S T   C H A N C E   S C R E E N *~
            *************************************************************

        startover
            u3% = 2%
            call "STARTOVR" (u3%)
            if u3% = 1% then return
            return clear all
            goto inputmode

        REM *************************************************************~
            *           L O A D   D A T A   F R O M   F I L E           *~
            *-----------------------------------------------------------*~
            * Loads data from File Record Area into Program Variables.  *~
            *************************************************************
        REM DATALOAD
        REM RETURN

        REM *************************************************************~
            *          S T U F F   D A T A   I N T O   F I L E          *~
            *-----------------------------------------------------------*~
            * Update Store Data and Part Data                           *~
            *************************************************************

        REM DATAPUT
        REM RETURN

        REM *************************************************************~
            *               F O R M A T  S T A T E M E N T S            *~
            *************************************************************

        REM *************************************************************~
            *               S C R E E N   P A G E   1                   *~
            *-----------------------------------------------------------*~
            * Document Input and Edit Screen.                           *~
            *************************************************************

        deffn'101(fieldnr%, edit%)
              gosub'050(1%, fieldnr%)
              gosub set_pf1
              if fieldnr% > 0% then init(hex(8c)) lfac$()                ~
                               else init(hex(86)) lfac$()
              on fieldnr% gosub L40210,         /* Screen's Selection*/   ~
                                L40200,         /* Production Date   */   ~
                                L40200,         /* Department Code   */   ~
                                L40200,         /* Dept Shift Code   */   ~
                                L40200          /* Load Number       */

              goto L40230

                  lfac$(fieldnr%) = hex(80)  :  return  /* Up / Low   */
L40200:           lfac$(fieldnr%) = hex(81)  :  return  /* Upper Only */
L40210:           lfac$(fieldnr%) = hex(82)  :  return  /* Numeric    */

L40230:     accept                                                       ~
               at (01,02), fac(hex(8c)), pname$                 , ch(21),~
               at (01,66), "Today:",                                     ~
               at (01,73), fac(hex(8c)), date$                  , ch(08),~
               at (02,20), fac(hex(a4)), apc$                   , ch(41),~
               at (03,02), fac(hex(94)), errormsg$              , ch(79),~
                                                                         ~
               at (06,02), "Screen Selections (1-3) :",                  ~
               at (06,30), fac(lfac$(1%)), scr_code$            , ch(01),~
               at (06,40), fac(hex(84)), scr_msg$               , ch(30),~
               at (07,02), "Planned Production Date :",                  ~
               at (07,30), fac(lfac$(2%)), scr_dte$             , ch(08),~
               at (08,02), "Department Code, or All :",                  ~
               at (08,30), fac(lfac$(3%)), scr_dept$            , ch(03),~
               at (08,40), fac(hex(84)), scr_msg1$              , ch(30),~
               at (09,02), "Department Shift Code   :",                  ~
               at (09,30), fac(lfac$(4%)), scr_shft$            , ch(02),~
               at (09,40), fac(hex(84)), scr_shft_d$            , ch(30),~
               at (10,02), fac(hex(84)), l_txt$                 , ch(25),~
               at (10,30), fac(lfac$(5%)), scr_load$            , ch(05),~
               at (10,40), fac(hex(84)), scr_desc$              , ch(30),~
                                                                         ~
               at (12,21), fac(hex(84)), scr$(1%)               , ch(40),~
               at (13,21), fac(hex(84)), scr$(2%)               , ch(40),~
               at (14,21), fac(hex(84)), scr$(3%)               , ch(40),~
               at (15,21), fac(hex(84)), scr$(4%)               , ch(40),~
               at (16,21), fac(hex(84)), scr$(5%)               , ch(40),~
               at (17,21), fac(hex(84)), scr$(6%)               , ch(40),~
               at (18,21), fac(hex(84)), scr$(7%)               , ch(40),~
               at (19,21), fac(hex(84)), scr$(8%)               , ch(40),~
               at (20,21), fac(hex(84)), scr$(9%)               , ch(40),~
                                                                         ~
               at (21,02), fac(hex(a4)),   inpmessage$          , ch(79),~
               at (22,02), fac(hex(8c)),   pf$(1%)              , ch(79),~
               at (23,02), fac(hex(8c)),   pf$(2%)              , ch(79),~
               at (24,02), fac(hex(8c)),   pf$(3%)              , ch(79),~
                                                                         ~
               keys(pfkeys$), key(keyhit%)

               if keyhit% <> 9% then goto L40600
                  gosub display_departments
                  goto L40230

L40600:        if keyhit% <> 15 then goto L40640
                  call "PRNTSCRN"
                  goto L40230

L40640:        close ws
               call "SCREEN" addr ("C", u3%, "I", i$(), cursor%())
               return

        set_pf1
           l_txt$ = "Production Load or Blank:"
           if  scr_code% = 3% then l_txt$ = "Schedule No. for Lineal :"

        if edit% = 2% then L40830     /*  Input Mode             */
            pf$(1%) = "(1)Start Over                           " &       ~
                      "                                       "
            pf$(2%) = "                 (4)Previous Field      " &       ~
                      "                       (15)Print Screen"
            pf$(3%) = "                 (9)Display Dept's      " &       ~
                      "                       (16)Exit Program"
            pfkeys$ = hex(01ffff04ffffffff09ffffffffff0f1000)
            if fieldnr% = 1% then L40790
                str(pf$(3%),64%) = " " : str(pfkeys$,16%,1%) = hex(ff)
L40790:     if fieldnr% > 1% then L40810
                str(pf$(2%),18%,26%) = " " : str(pfkeys$,4%,1%) = hex(ff)
L40810:     return

L40830: if fieldnr% > 0% then L40920  /*  Edit Mode - Select Fld */
            pf$(1%) = "(1)Start Over                           " &       ~
                      "                                       "
            pf$(2%) = "                                        " &       ~
                      "                       (15)Print Screen"
            pf$(3%) = "                 (9)Display Dept's      " &       ~
                      "                       (16)Print Data  "
            pfkeys$ = hex(01ffffffffffffff09ffffffffff0f1000)
            return
L40920:                              /*  Edit Mode - Enabled    */
            pf$(1%) = "(1)Start Over                           " &       ~
                      "                                       "
            pf$(2%) = "                                        " &       ~
                      "                                       "
            pf$(3%) = "                 (9)Display Dept's      " &       ~
                      "                                       "
            pfkeys$ = hex(01ffffffffffffff09ffffffffffffff00)
            return

        REM *************************************************************~
            *               S C R E E N   P A G E   2                   *~
            *-----------------------------------------------------------*~
            * Stock Parts Glass Entry                                   *~
            *************************************************************

        deffn'102(fieldnr%, edit%)
              gosub'060(1%, fieldnr%)
              gosub set_pf2
              if fieldnr% > 0% then init(hex(8c)) lfac$()                ~
                               else init(hex(86)) lfac$()
              on fieldnr% gosub L41180          /* Stock Part Number */

              goto L41210

                  lfac$(fieldnr%) = hex(80)  :  return  /* Up / Low   */
L41180:           lfac$(fieldnr%) = hex(81)  :  return  /* Upper Only */
                  lfac$(fieldnr%) = hex(82)  :  return  /* Numeric    */

L41210:     accept                                                       ~
               at (01,02), fac(hex(8c)), pname$                 , ch(21),~
               at (01,66), "Today:",                                     ~
               at (01,73), fac(hex(8c)), date$                  , ch(08),~
               at (02,20), fac(hex(a4)), apc$                   , ch(41),~
                                                                         ~
               at (04,16), fac(hex(84)), txt$(1%)               , ch(50),~
               at (05,16), fac(hex(84)), txt$(2%)               , ch(50),~
               at (06,16), fac(hex(84)), txt$(3%)               , ch(50),~
                                                                         ~
               at (07,02), fac(hex(94)), errormsg$              , ch(79),~
                                                                         ~
               at (08,02), "MFG Part Number   :",                        ~
               at (08,25), fac(lfac$(1%)), dt_part$             , ch(25),~
               at (09,25), fac(hex(84)), dt_desc$               , ch(32),~
                                                                         ~
               at (10,10), fac(hex(84)), cut$(1%)               , ch(62),~
               at (11,10), fac(hex(84)), cut$(2%)               , ch(62),~
               at (13,10), fac(hex(84)), cut$(3%)               , ch(62),~
               at (14,10), fac(hex(84)), cut$(4%)               , ch(62),~
                                                                         ~
               at (21,02), fac(hex(a4)),   inpmessage$          , ch(79),~
               at (22,02), fac(hex(8c)),   pf$(1%)              , ch(79),~
               at (23,02), fac(hex(8c)),   pf$(2%)              , ch(79),~
               at (24,02), fac(hex(8c)),   pf$(3%)              , ch(79),~
                                                                         ~
               keys(pfkeys$), key(keyhit%)

               if keyhit% <> 15 then goto L41480
                  call "PRNTSCRN"
                  goto L41210

L41480:        close ws
               call "SCREEN" addr ("C", u3%, "I", i$(), cursor%())
               return

        set_pf2
        if edit% = 2% then L41630     /*  Input Mode             */
            pf$(1%) = "(1)Start Over                           " &       ~
                      "                                       "
            pf$(2%) = "                                        " &       ~
                      "                       (15)Print Screen"
            pf$(3%) = "                                        " &       ~
                      "                       (16)Exit Program"
            pfkeys$ = hex(01ffffffffffffffffffffffffff0f1000)
            return

L41630: if fieldnr% > 0% then L41720  /*  Edit Mode - Select Fld */
            pf$(1%) = "(1)Start Over                           " &       ~
                      "                       (14)Calc Data   "
            pf$(2%) = "                                        " &       ~
                      "                       (15)Print Screen"
            pf$(3%) = "                                        " &       ~
                      "                       (16)Exit Screen "
            pfkeys$ = hex(01ffffffffffffffffffffffff0e0f1000)
            return
L41720:                              /*  Edit Mode - Enabled    */
            pf$(1%) = "(1)Start Over                           " &       ~
                     "                                       "
            pf$(2%) = "                                        " &       ~
                     "                                       "
            pf$(3%) = "                                        " &       ~
                     "                                       "
            pfkeys$ = hex(01ffffffffffffffffffffffffffffff00)
            return

        REM *************************************************************~
            *                     T E S T   D A T A                     *~
            *-----------------------------------------------------------*~
            * Test data for the items on Screen 1.                      *~
            *************************************************************

        deffn'151(fieldnr%)
            errormsg$ = " "
            on fieldnr% gosub L50150,         /* Screen's Selection    */ ~
                              L50340,         /* Production Date       */ ~
                              L50550,         /* Department Code       */ ~
                              L50750,         /* Shift Code            */ ~
                              L50930          /* Load Number           */
            return

L50150: REM Screen's Selection                    SCR_CODE$
            scr_code% = 0%
            if scr_code$ <> " " then goto L50190
               scr_code$ = "1"
L50190:     convert scr_code$ to scr_code%, data goto L50290

            if scr_code% < 1% or scr_code% > 3% then goto L50290
            scr_msg$ = str(scr$(scr_code% + 3%),9%,30%)
            if scr_code% <> 1% then return
               init(" ") scr_dept$, scr_msg1$, scr_load$, scr_desc$,     ~
                         scr_dte$, scr_dte1$, screen_dte$, screen_dte1$, ~
                         scr_shft$, scr_shft_d$
               gosub begin_process
        return
L50290:     errormsg$ = "(Error) - Invalid Screen's Selection?"
            gosub error_prompt
            init(" ") scr_code$, scr_msg$
        return

L50340: REM Planned Production Date               SCR_DTE$, SCR_DTE1$
           date% = 0%
           call "DATEOK" (scr_dte$, date%, errormsg$ )
           if errormsg$ <> " " then return
              scr_dte1$ = scr_dte$
              call "DATUNFMT" (scr_dte1$)
              dt_key1$ = all(hex(00))
              str(dt_key1$,1%,6%) = str(scr_dte1$,1%,6%)
              read #2,key 1% > dt_key1$, using L50440, dt_key1$,          ~
                                                      eod goto L50500
L50440:         FMT POS(47), CH(57)
              if str(scr_dte1$,1%,6%) <> str(dt_key1$,1%,6%) then        ~
                                                             goto L50500
              screen_dte$  = scr_dte$
              screen_dte1$ = scr_dte1$
        return
L50500:    errormsg$ = "(Error) - No Data for Specified Date?"
           gosub error_prompt
           init(" ") scr_dte$, scr_dte1$, dt_key1$
        return

L50550: REM Department Code                       SCR_DEPT$, SCR_MSG1$
            if scr_dept$ <> "  " then goto L50610
L50570:        scr_dept$ = "ALL"
               scr_dept% = 0%
               scr_msg1$ = "(All) Departments "
               return
L50610:     if str(scr_dept$,1%,1%) = "A" then goto L50570
            convert scr_dept$ to scr_dept%, data goto L50700

            convert scr_dept% to scr_dept$, pic(000)

            gosub lookup_dept
            if dept% = 0% then goto L50700
            scr_msg1$ = descr$
        return
L50700:     errormsg$ = "(Error) Invalid Department Code? "
            gosub error_prompt
            init(" ") scr_dept$, scr_msg1$
        return

L50750: REM Department Shift Code               SCR_SHFT$, SCR_SHFT_D$
           if scr_shft$ <> " " then goto L50800
L50770:       scr_shft$ = "AA"
              scr_shft_d$ = "(All) Shifts"
              return
L50800:    if str(scr_shft$,1%,1%) = "A" then goto L50770
              init(" ") readkey$, scr_shft_d$
              str(readkey$,1%,9%) = "PLAN SHFT"
              str(readkey$,10%,15%) = scr_shft$
              read #3,key = readkey$, using L50860, scr_shft_d$,          ~
                                                   eod goto L50880
L50860:          FMT POS(25), CH(30)
        return
L50880:    errormsg$ = "(Error) Invalid Department Shift Code?"
           gosub error_prompt
           init(" ") scr_shft$, scr_shft_d$
        return

L50930: REM LOAD NUMBER
           if scr_code% = 3% then goto sched_edit

           if len(scr_load$) < 3 then return
           convert scr_load$ to scr_load%, data goto L51010

           convert scr_load% to scr_load$, pic(00000)
           goto L51050
L51010:    convert str(scr_load$,2%,4%) to scr_load%, data goto L51150

           convert scr_load% to str(scr_load$,2%,4%), pic(0000)

L51050:    dt_key3$ = all(hex(00))
           str(dt_key3$,1%,6%) = scr_load$
           read #2,key 3% > dt_key3$, using L51090, dt_key3$,   stk_so$,  ~
                                                           eod goto L51150
L51090:       FMT CH(23), CH(8)
           if scr_load$ <> str(dt_key3$,1%,5%) then goto L51150
              scr_desc$ = "Standard Load S.O. = "& stk_so$
           if str(scr_load$,1%,1%) = "S" then                            ~
              scr_desc$ = "Stock Load S.O. = "& stk_so$
        return
L51150:    errormsg$ = "(Error) - Invalid Standard Load Number?"
           if str(scr_load$,1%,1%) = "S" then                            ~
              errormsg$ = "(Error) - Invalid Stock Load Number?"
           gosub error_prompt
           init(" ") scr_load$, scr_desc$, stk_so$, dt_key3$
        return

        sched_edit
            convert scr_load$ to sched%, data goto L51270

            if sched% < 100% or sched% > 999% then goto L51270
            scr_desc$ = "Default Batch Size = 100"
        return
L51270:     errormsg$ = "(Error) - Invalid Schedule Number?"
            gosub error_prompt
            init(" ") scr_load$, scr_desc$, stk_so$, dt_key3$
        return

        deffn'152(fieldnr%)
            errormsg$ = " "
            on fieldnr% gosub L51380          /* Stock Part Number     */

            return

L51380: REM Stock Part Number                     DT_PART$
            init(" ") cut$()
            if dt_part$ <> " " then goto L51450
               dt_desc$ = " "
               dt_desc$ = hex(06) & "Select a Valid Stock Part"
               call "GETCODE" (#7,dt_part$, dt_desc$, 0%, 1.32, f1%(7%))

L51450:     dt_desc$ = "( Non Stock Product!! )"
            read #7,key = dt_part$, using L51470,dt_desc$,eod goto L51480
L51470:        FMT POS(26), CH(32)
L51480:     if len(dt_part$) < 19 then goto L51550
                                                /* No Screen Skip Part */
            if str(dt_part$,11%,1%) = "0" then goto L51550
               scr_dept$ = "ALL"
               scr_shft$ = "AA"
            gosub L51600
        return
L51550:     init(" ") dt_part$, model$, dt_load$, dt_desc$, cut$()

            errormsg$ = "(Error) - Invalid Part Number Entry."
        return

L51600: REM CUT$() Display Cut Sizes              CUT$()
              cut$(1%) =                                                 ~
         "(1) WD =           HT =          CB =           CL =          "
              cut$(2%) =                                                 ~
         "(2) WD =           HT =          CB =           CL =          "
              cut$(3%) =                                                 ~
         "(3) WD =           HT =          CB =           CL =          "
              cut$(4%) =                                                 ~
         "(4) WD =           HT =          CB =           CL =          "
                                                /* Width  = Pos(10,9) */
                                                /* Height = Pos(25,8) */
                                                /* Cb     = Pos(39,9) */
                                                /* Cl     = Pos(54,8) */
        return

        display_departments
           readkey$ = " "
           str(readkey$,1%,9%) = "SCREEN05 "
           descr$ =hex(06) & "Dept Batch/Sort/Descr Info"
           call "PLOWCODE" (#3, readkey$, descr$, 9%, .30, f1%(2%))
        return

        lookup_dept
           dept% = 0%
           init(" ") readkey$, descr$
           str(readkey$,1%,9%) = "PLAN DEPT"
           str(readkey$,10%,15%) = scr_dept$
           read #3,key = readkey$, using L51880, descr$
L51880:       FMT POS(25), CH(30)
           dept% = 1%
        return

        REM *************************************************************~
            *           I M A G E   S T A T E M E N T S                 *~
            *************************************************************

                                                      /* Report Header */
L55050: %+---------------------------------------------------------------~
        ~-----------------------------------------------------------------~
        ~-+

L55090: %!########@########                                  ############~
        ~#############                                           Page: ###~
        ~ !

L55130: %! Production Date: ########                        Screen Consol~
        ~idation Report                               Department Code: ###~
        ~ !

L55170: %! Production Date: ########                        Screen Center~
        ~Bar Cut Report                               Department Code: ###~
        ~ !

L55210: %!                                                               ~
        ~                                                                 ~
        ~ !

L55250: %!---------------------------------------------------------------~
        ~-----------------------------------------------------------------~
        ~-!
                                                              /* Screen*/
L55290: %!Mod! Qty !Cl!  Width       Height !<----- Type ------->!Cb Cut ~
        ~Ln!<Center Bar Cut Location>!<------ Hinge ----->!  Window Size  ~
        ~ !
                                                              /* SCREEN*/
L55330: %!---!-----!--!---------------------!--------------------!-------~
        ~--!-------------------------!--------------------!---------------~
        ~-!
                                                              /* SCREEN*/
L55370: %!###!#####!##!######### BY ########!####################!#######~
        ~##!#########################!####################!####### X #####~
        ~#!
                                                              /* Totals*/
L55410: %! Batch No.: ###   Tot Screens: #####   Tot Half Screens: ##### ~
        ~ Tot Full Screens: #####  Tot Cot/Oriel: ####  Tot Samp/Disp: ###~
        ~ !
                                                              /* Labels*/
L55450: %# ### ## ####-########-CL######### ######## #####
L55460: %#########X######## CB######### A:#######X###### #

        REM - Test Labels
L55490: %XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

        REM - Printer Equation Errors
L55520: %S.O. ######## Seq:##### #########################

        REM *************************************************************~
            *           S P E C I A L   S U B R O U T I N E S           *~
            *************************************************************

        print_header                         /* GENERIC REPORT HEADING */
          if lcnt% <> 99% then print using L55050
          pageno% = pageno% + 1%
          print page
          print using L55050
          print using L55090, date$, rpt_time$, title$, pageno%
          if pass% = 0% then print using L55130, scr_dte$, dt_dept$       ~
                        else print using L55170, scr_dte$, dt_dept$

          print using L55250
          print using L55290
          lcnt% = 5%
        return

        print_detail
          if lcnt% > 60% then gosub print_header

             print using L55330
             print using L55370, model$, qty$, cl_l$, wd1$, ht1$, sc_r$,  ~
                                wd2$, grid$, hnge$, wd$, ht$
             lcnt% = lcnt% + 2%
        return

        print_total
          print using L55250
          print using L55210
          print using L55410, dd%, batch%(dd%,2%), batch%(dd%,3%),        ~
                                  batch%(dd%,4%), batch%(dd%,5%),        ~
                                  batch%(dd%,6%)
          print using L55050
          lcnt% = 99%
        return

        print_labels_detail
          if str(lab_rec$,6%,3%) = "ERR" then goto L60220
             print using L55450, str(view$,1%,1%), model$, cl_l$, sc_l$,  ~
                                co_or$, ht2$ , dt_so$, dt_seq$
             print using L55460, wd1$, ht1$, wd2$, wd$, ht$, txt_flag$
             print
        return
L60220:   print using L55520, dt_so$, dt_seq$, str(lab_rec$,11%,25%)
          print using L55520, dt_so$, dt_seq$, str(lab_rec$,11%,25%)
          print
        return

        convert_fields
            if sav_part$ = dt_part$ then return
            init(" ") special$, ph$(), sav_part$
            s_width  = 0.0               /* Window Width in Decimal   */
            s_height = 0.0               /* Window Height in Decimal  */
            s_clmr   = 0.0               /* Center Bar in Decimal     */
            s_half   = 0.0               /* Half Screen Calc Constant */
            s_full   = 0.0               /* Full Screen Calc Constant */
            special$ = "0"               /* '0'=Ctr Bar Not Specified */
            model$  = str(dt_part$,1%,3%)             /* Model Number */
            cl$     = str(dt_part$,4%,1%)             /* Color        */
            gl$     = str(dt_part$,5%,2%)             /* Glass        */
            lt$     = str(dt_part$,7%,2%)             /* Liting       */
            hg$     = str(dt_part$,9%,2%)             /* Hinge        */
            sc$     = str(dt_part$,11%,1%)            /* Screen       */
            lk$     = str(dt_part$,12%,1%)            /* Locks        */
            width$  = str(dt_part$,13%,4%)            /* Width        */
            height$ = str(dt_part$,17%,3%)            /* Height       */
            clmr$   = str(dt_part$,20%,3%)            /* CLMR         */
            wallw$  = str(dt_part$,23%,3%)            /* WALLWIDT     */
            sav_part$ = dt_part$
            gosub std_wd_ht                    /* Window WD$ & HT$    */
            gosub lookup_color                 /* CL_L$ & COLOR$      */
            gosub lookup_hinge                 /* HG_L$ & HH$         */
            gosub lookup_screen                /* SC_R$ & SC_L$       */
                                               /* Convert Width/Height*/
               a1, a2 = 0.0                    /* and Ctr Bar to Decim*/
               convert str(width$,1%,3%) to a1, data goto L60385
L60385:
               convert str(width$,4%,1%) to a2, data goto L60395
L60395:
               s_width = a1 + (a2/8.0)         /* Decimal Width       */
               a1, a2 = 0.0
               convert str(height$,1%,2%) to a1, data goto L60415
L60415:
               convert str(height$,3%,1%) to a2, data goto L60425
L60425:
               s_height = a1 + (a2/8.0)        /* Decimal Height      */
               a1, a2 = 0.0
            if len(dt_part$) < 22 then goto L60495
               convert str(clmr$,1%,2%) to a1, data goto L60465

               convert str(clmr$,3%,1%) to a2, data goto L60460
L60460:
               s_clmr = a1 + (a2/8.0)
L60465:        if len(dt_part$) > 22 then goto L60485
                     if dt_wood$ <> "000" then s_clmr = 0.0
L60485:        if s_clmr <= 8.0 then s_clmr = 0.0
               if s_clmr > 0.0 then gosub get_special /* Specified CB  */
L60495: REM                                  /* Find Phantom's for Calc*/
            for ss% = 1% to ss_max%
                if str(ss$(ss%),1%,4%) = skey$ then goto L60545
            next ss%
        error% = 4%                          /* Product Error for MFG  */
        if scr_code% <> 1% then return
           errormsg$ = err$(error%)
           gosub error_prompt
           init(" ") errormsg$
        return
L60545:     ph$(1%) = str(ss$(ss%),5%,4%)     /* Cut Width Calc        */
            ph$(2%) = str(ss$(ss%),9%,4%)     /* Cut Height Calc       */
            ph$(3%) = str(ss$(ss%),13%,4%)    /* CB Cut Length         */
            ph$(4%) = str(ss$(ss%),17%,4%)    /* CB Cut Location       */
        return                                /* Note '0000' = N/A     */

        get_special                           /* Specified Meeting Rail*/
            init(" ") readkey$, descr$
            str(readkey$,1%,9%)   = "SCREEN06 "
            str(readkey$,10%,15%) = model$
            read #3,key = readkey$, using L60600, descr$, eod goto L60640
L60600:        FMT POS(25), CH(30)
            convert str(descr$,1%,9%) to s_half, data goto L60610
L60610:
            convert str(descr$,11%,9%) to s_full, data goto L60620
L60620:
            special$ = "1"                    /* Specified Ctr Bar     */
            str(skey$,2%,2%) = "SP"           /* 'SP' = Specified      */
        return
L60640:     error% = 3%
            if scr_code% <> 1% then return
            errormsg$ = err$(error%)
            gosub error_prompt
            init(" ") errormsg$
        return

        check_support                                 /* SUPPORT DEPTS */
            init(" ") readkey$ : supp% = 0%
            str(readkey$,1%,9%)   = "PLAN SUPP"
            str(readkey$,10%,15%) = dt_dept$
            read #3,key = readkey$, eod goto L60710
            supp% = 1%
        return                     /* No Screen Processing for Dept's  */
L60710:     if dt_dept$ = "023" or dt_dept$ = "042" or dt_dept$ = "056"  ~
                                                       then supp% = 1%
        return

        lookup_color                                  /* Look Up Color */
            init(" ") readkey$, descr$, cl_l$, color$
            str(readkey$,1%,9%)   = "COLOR    "
            str(readkey$,10%,15%) = cl$
            read #3,key = readkey$, using L60755, descr$,eod goto L60775
L60755:        FMT POS(25), CH(30)
            cl_l$   = str(descr$,1%,2%)
            color$  = str(descr$,6%,6%)
        return
L60775:     color$ = "N/A"
        return

        lookup_hinge                                  /* Look Up Hinge */
            triple% = 0%
            init(" ") readkey$, descr$, hnge$, hg_l$, hh$
            str(readkey$,1%,9%)   = "HINGE    "
            str(readkey$,10%,15%) = hg$
            read #3,key = readkey$, using L60755, descr$, eod goto L60865
            p% = pos(descr$ = "-")
            hnge$ = str(descr$,p%+2%)
            if str(descr$,p%+2%,2%) = "  " then                          ~
                    hnge$ = str(descr$,1%,p%-1%)
            hg_l$ = str(descr$,1%,p%-2%)
            if str(descr$,p%-4%,3%) = "1/3" then triple% = 1%
            if str(hg_l$,1%,2%) = "CO" then hh$ = "COTTAGE"
            if str(hg_l$,1%,2%) = "OR" then hh$ = "ORIEL  "
        return
L60865:     hnge$ = "(Error) - Invalid Hinge Code?"
        return

        lookup_screen                                /* Look Up SCREEN */
            init(" ") readkey$, descr$, sc_l$, sc_r$
            str(readkey$,1%,9%)   = "SCREEN   "
            str(readkey$,10%,15%) = sc$
            read #3,key = readkey$, using L60755, descr$, eod goto L60925
            p% = pos(descr$ = "-")
            sc_r$ = str(descr$,1%,20%)
            sc_l$ = str(descr$,1%,p%-2%)
        return
L60925:     sc_r$ = "(error) - Invalid Screen Code?"
        return

        std_wd_ht             /* Convert Standard Width and Height    */
                              /* F0%       - Fract. New Part Width    */
                              /* F1%       - Fract. New Part Height   */
                              /* WD$   - Width & Fract (7) in 8'ths   */
                              /* HT$   - Height & Fract(6) in 8'ths   */
           str(wd$,1%,3%)  = str(dt_part$,13%,3%)   /* Width Part (3) */
           if str(wd$,1%,1%) = "0" then str(wd$,1%,1%) = " "
           str(ht$,1%,2%) = str(dt_part$,17%,2%)    /* Height Part (2)*/

           f0%, f1% = 0%                            /* Set Fractions  */
           convert str(dt_part$,16%,1%) to f0%, data goto L61015 /*WID */

           convert str(dt_part$,19%,1%) to f1%, data goto L61015 /*HGT */

           goto L61020
L61015:      f0%, f1% = 8%
L61020:    if f0% = 0% then f0% = 9%
           if f1% = 0% then f1% = 9%

           str(wd$,4%,1%) = " "          /* Build Width with Fraction */
           str(wd$,5%,3%) = sze$(f0%)    /* in 8'ths                  */

           str(ht$,3%,1%) = " "          /* Build Height with Fraction*/
           str(ht$,4%,3%) = sze$(f1%)    /* in 8'ths                  */
        return

        calc_wd_ht             /* CONVERT STANDARD WIDTH AND HEIGHT */
                              /* WD1$  - REPLACEMENT WIDTH & FRACT (9)*/
                              /* HT1$  - REPLACEMENT HEIGHT & FRACT(8)*/
           calc = sav_width1                  /* CALCULATED WIDTH (3) */
           gosub convert_sixteen
           wd1$ = "       "
           convert a% to str(wd1$,1%,3%),pic(###)   /* WIDTH (3)      */

           if b% = 0% then goto L61125
              str(wd1$,5%,5%) = sze1$(b%)           /* SET FRACTIONS  */

L61125:    calc = sav_height1
           gosub convert_sixteen
           ht1$ = "       "
           convert a% to str(ht1$,1%,2%), pic(##)   /* HEIGHT (2)     */

           if b% = 0% then goto L61160
              str(ht1$,4%,5%) = sze1$(b%)
L61160: return

        calc_wd                                   /* Convert CenterBar */
           wd2$ = "         "                     /* CB Cut            */
           ht2$ = "       "                       /* Center Bar Loc    */
           if sav_width2 > 0.0 then goto L61195
              return                              /* Not Applicable    */
L61195:    calc = sav_width2                      /* Convert Center Bar*/
           gosub convert_sixteen

           convert a% to str(wd2$,1%,3%),pic(###) /* Center Bar Cut   */

           if b% = 0% then goto L61235
              str(wd2$,5%,5%) = sze1$(b%)         /* Set Fractions    */

L61235:    calc = sav_height2                     /* Calc Ctr Loc     */
           gosub convert_sixteen
           convert a% to str(ht2$,1%,2%), pic(##) /* Height (2)       */

           if b% = 0% then goto L61265
              str(ht2$,4%,5%) = sze1$(b%)
L61265: return

        convert_sixteen
              calc = round( calc, 4 )
              a% = int(calc)
              b% = int((calc - a%) * 10000)
              if b% = 0% then goto L61325               /****************/
              d% = 0%                                  /*              */
L61305:       d% = d% + 1%                             /* Conversion of*/
              if d% > 16% then goto L61330              /* Decimals to  */
                 if b% > d% * 0625 then goto L61305     /*  SIXTEEN'S   */
                 b% = d%                               /****************/
L61325:          if b% <> 16% then goto L61335
L61330:       a% = a% + 1% : b% = 0%       /* A% = WHOLE PART          */
L61335: REM   CALC = (A% * 100) + B%       /* B% = FRACTION (0 THRU 15 */
        return

        create_data                           /* Screen Consolidation */
            mode% = 1% : gosub open_work
            mode% = 3% : gosub open_work
            init(" ") dt_key1$, dt_rec$, sav_part$, sav_screen$, phantom$
            str(dt_key1$,1%,6%) = str(scr_dte1$,1%,6%)
            read #2,key 1% > dt_key1$, using L61425, dt_rec$,             ~
                                                eod goto create_data_done
            goto L61435
        create_data_nxt
            if scr_code% <> 1% then goto L61420
                if ct% <> 0% then return        /* MFG Calculation     */
                   errormsg$ = err$(6%)
                   gosub error_prompt
                   return
L61420:     read #2, using L61425, dt_rec$, eod goto create_data_done
L61425:        FMT CH(256)

L61435:     if str(dt_rec$,47%,6%) <> str(scr_dte1$,1%,6%) then          ~
                                                   goto create_data_done
            dt_load$ = str(dt_rec$,1%,5%)
            dt_part$ = str(dt_rec$,189,25%)
            if len(dt_part$) < 19 then goto create_data_nxt
            if len(scr_load$) < 5 then goto L61480
               if scr_load$ <> dt_load$ then goto create_data_nxt
                  goto L61490

L61480:     if str(dt_load$,1%,1%) = "A" then goto create_data_nxt

L61490:     dt_dept$    = str(dt_rec$,42%,3%)
            dt_shft$    = str(dt_rec$,104%,2%)
            dt_seq$     = str(dt_rec$,111%,5%)
            dt_so$      = str(dt_rec$,24%,8%)
            dt_index$   = str(dt_rec$,66%,30%)
            dt_ref$     = str(dt_rec$,96%,8%)
            dt_samp$    = str(dt_rec$,216%,1%)
            dt_wood$    = str(dt_rec$,217%,3%)
            dt_txt$     = str(dt_rec$,236%,4%)
            dt_special$ = str(dt_rec$,220%,10%)  /* 9%,1% = Cot/Oriel  */
                                                 /* 5%,1% = Sample     */
                                                 /* 6%,1% = Display    */

        calc_data
            gosub check_screen
            if check% = 0% then goto create_data_nxt
               if scr_code% <> 1% then goto L61585
                  call "SHOSTAT" ("Calculating Screen Size")

L61585:        ct% = 0%
               gosub check_sort            /* Skip Support Departments */
               if scr_code% = 1% then dd% = 1%       /* Explode Screen */
               if dd% = 0% then goto create_data_nxt

               if scr_dept$ = "ALL" then goto L61625 /* All Departments */
                  if scr_dept$ <> dt_dept$ then                          ~
                                                  goto create_data_nxt
L61625:        if scr_shft$ = "AA" then goto L61640  /* All Shifts      */
                  if scr_shft$ <> dt_shft$ then goto create_data_nxt

L61640:        gosub convert_fields
               sav_width1  = 0.0 : sav_width2  = 0.0
               sav_height1 = 0.0 : sav_height2 = 0.0

               cal% = 2%                       /* Calc the Cut Width   */
               str(phantom$,1%,4%) = ph$(1%)
               gosub lookup_phantom
               sav_width1 = width

               cal% = 3%                       /* Calc the Cut Height  */
               str(phantom$,1%,4%) = ph$(2%)
               if str(ph$(2%),1%,4%) = "TABL" then gosub spec_half       ~
                                              else gosub lookup_phantom
               sav_height1 = height

               cal% = 2%                       /* Calc CB Length(Width)*/
               if str(skey$,1%,1%) = "B" then cal% = 3%  /* Height Calc*/
               str(phantom$,1%,4%) = ph$(3%)
               gosub lookup_phantom
               sav_width2 = width
               if str(skey$,1%,1%) = "B" then sav_width2 = height

               cal% = 3%                       /* Calc CB Location(High*/
               if ph$(4%) <> "CTRS" then goto L61775
                  sav_height2 = round(sav_width1 / 2.0, 2)
                  goto L61795

L61775:        str(phantom$,1%,4%) = ph$(4%)
               if str(ph$(4%),1%,4%) = "TABL" then gosub spec_full       ~
                                              else gosub lookup_phantom
               sav_height2 = height
L61795:        for ik% = 1% to sqty%
                   gosub batch_sort
                   gosub update_work
               next ik%

            goto create_data_nxt
        create_data_done
            if scr_code% = 3% then goto optimize
               pass% = 0% : gosub print_report_screen
               pass% = 1% : gosub print_report_screen

               gosub print_labels_screen
               gosub delete_work
        return

        optimize
            size% = 100%
            scr_prod$ = "0"
            call "APCPLA47" ( size%,                      /* BATCH SIZE*/~
                              sched%,                     /* Start Sch */~
                              scr_dte$,                   /* Prod Date */~
                              scr_dept$,                  /* DEPARTMENT*/~
                              scr_prod$,                  /* Prod Line */~
                              #6,                         /* APCPLNW2  */~
                              #3,                         /* GENCODES  */~
                              #8,                         /* APCCUTEQ  */~
                              #1,                         /* AMTBOMCD  */~
                              #4 )                        /* AMTBOMIF  */
                                         /* Special Sub. for or Bilco  */

               gosub delete_work
        return

        check_sort                          /* Exit with Subscript for */
            dd% = 0%                        /* Specified Department    */
            gosub check_support
            if supp% = 1% then return
            for dd% = 1% to dept_max%
                if dt_dept$ = dept$(dd%) then return
            next dd%
        dd% = 0%
        return

        batch_sort
           if scr_code% = 1% then return       /* Count Full Windows   */
           batch%(dd%,2%) = batch%(dd%,2%) + 1%
                                               /* Check Against Limit  */
           if batch%(dd%,1%) = batch%(dd%,2%) then dept$(dd%) = "XXX"
                                               /* Count Half Screens   */
                                               /* and Full Screens     */
           if sc$ = "2" then batch%(dd%,4%) = batch%(dd%,4%) + 1%        ~
                        else batch%(dd%,3%) = batch%(dd%,3%) + 1%
           if str(dt_special$,9%,1%) = "Y" then                          ~
               batch%(dd%,5%) = batch%(dd%,1%) + 1%   /* Cottage/Oriel */
           if str(dt_special$,5%,1%) = "Y" then                          ~
               batch%(dd%,6%) = batch%(dd%,6%) + 1%   /* Sample        */
           if str(dt_special$,6%,1%) = "Y" then                          ~
               batch%(dd%,6%) = batch%(dd%,6%) + 1%   /* Display       */
        return

        update_work
            init(" ") wrk_key$, lab_rec$, wrk_rec1$
            wrk_fil$ = "               "
            lab_fil$ = "         "
            if error% <> 0% then goto create_error_rec
            str(wrk_key$,1%,1%) = "0"                  /* Unused Codes */
                                      /* 1st - Alpha Sort Code by Dept */
                                      /* 2nd - Product Code (Model)    */
                                      /* 3rd - Screen Color Code       */
            str(wrk_key$,2%,1%) = str(sort$,dd%,1%) /* Sort Code       */
            str(wrk_key$,3%,3%) = dt_dept$          /* Department      */
            str(wrk_key$,6%,30%)= dt_index$         /* Planning Sort   */

            gosub calc_wd                              /* WD2$/ HT2$   */
            gosub calc_wd_ht                           /* WD1$/ HT1$   */
            str(wrk_key$,36%,9%) = wd2$                /* CB Cut       */
            str(wrk_key$,45%,1%) = sc$                 /* Screen Type  */
            str(wrk_key$,46%,2%) = hg$                 /* Hinge Code   */
            str(wrk_key$,48%,3%) = model$              /* Model Code   */
            str(wrk_key$,51%,9%) = ht2$                /* CB Location  */
            str(wrk_key$,60%,1%) = cl$                 /* Color        */
            if scr_code% <> 1% then goto update_rec
               ct% = ct% + 1%
               str(cut$(ct%),10%,9%) = wd1$            /* Cut Width    */
               str(cut$(ct%),25%,8%) = ht1$            /* Cut Height   */
               str(cut$(ct%),39%,9%) = wd2$            /* CB Cut Length*/
               str(cut$(ct%),54%,8%) = ht2$            /* CB Location  */
               return

        update_rec
            read #5,hold,key = wrk_key$, using L62260, wrk_qty%,          ~
                                                      eod goto create_rec
L62260:       FMT POS(61), BI(2)
            wrk_qty% = wrk_qty% + 1%
            put #5, using L62260, wrk_qty%
            rewrite #5
            goto L62345
        create_rec
            wrk_qty% = 1%
            str(wrk_rec1$,1%,60%) = wrk_key$
            put str(wrk_rec1$,61%,2%), using L62305, wrk_qty%
L62305:       FMT BI(2)
            str(wrk_rec1$,63%,7%) = wd$
            str(wrk_rec1$,70%,6%) = ht$
            str(wrk_rec1$,76%,9%) = wd1$         /* Calc. Width  */
            str(wrk_rec1$,85%,8%) = ht1$         /* Calc. Height */
            str(wrk_rec1$,93%,36%)= wrk_fil$
            write #5, using L62340, wrk_rec1$
L62340:       FMT CH(128)
L62345:     gosub update_label
        return

        create_error_rec
            if scr_code% <> 1% then goto L62380
               errormsg$ = err$(error%)
               return
L62380:     str(wrk_key$,1%,5%)  = "99999"
            str(wrk_key$,6%,5%)  = "ERR" & "00"
            convert error% to str(wrk_key$,9%,2%), pic(00)

            str(wrk_key$,11%,25%) = dt_part$
            str(wrk_key$,38%,3%) = "ERR"
            convert wrk_qty% to str(wrk_key$,41%,5%),pic(00000)
            goto update_rec

        update_label
            str(lab_rec$,1%,60%) = wrk_key$
            convert wrk_qty% to str(lab_rec$,61%,5%),pic(00000)
            str(lab_rec$,66%,1%)  = " "            /* VIEW$ Not Applic */
            str(lab_rec$,67%,3%)  = model$
            if str(dt_special$,9%,1%) = "Y" then                         ~
               str(lab_rec$,70%,6%)  = "Co-Or/"    /* Cottage/Oriel    */
            if str(dt_special$,5%,1%) = "Y" then                         ~
               str(lab_rec$,76%,2%)  = "Sp"        /* Sample           */
            if str(dt_special$,6%,1%) = "Y" then                         ~
               str(lab_rec$,76%,2%)  = "Dp"        /* Display          */
            str(lab_rec$,78%,8%)  = dt_so$
            str(lab_rec$,86%,5%)  = dt_seq$
            str(lab_rec$,91%,9%)  = wd1$
            str(lab_rec$,100%,8%) = ht1$
            str(lab_rec$,108%,9%) = wd2$
            str(lab_rec$,117%,7%) = wd$
            str(lab_rec$,124%,6%) = ht$
            str(lab_rec$,130%,4%) = dt_txt$
            str(lab_rec$,134%,1%) = cl$                      /* Color  */
            str(lab_rec$,135%,2%) = hg$
            str(lab_rec$,137%,1%) = sc$                      /* Screen */
            str(lab_rec$,138%,25%)= dt_part$                 /* PART NO*/
            str(lab_rec$,163%,8%) = dt_ref$                  /* WARRANT*/
            str(lab_rec$,171%,1%) = dt_samp$                 /* 0,1,2  */
            str(lab_rec$,172%,5%) = dt_load$                 /* LOAD NO*/
            str(lab_rec$,177%,24%)= " "

            write #6, using L62570, lab_rec$, eod goto L62580
L62570:       FMT CH(200)
        return
L62580:     errormsg$ = "(ERR) KEY -> " & str(lab_rec$,1%,60%)
            gosub error_prompt
            init(" ") errormsg$
        return

        lookup_phantom                           /* 1%=Width and Height*/
            err% = 0%                            /* 2%=Width Only      */
            width = 0.0 : height = 0.0           /* 3%=Height Only     */
            if str(phantom$,1%,4%) = "0000" then goto L62670    /* N/A  */

            call "APCCALSB" (cal%,                 /* CALC TYPE 1%,2%,3*/~
                             dt_part$,             /* PART NUMBER      */~
                             phantom$,             /* PHANTOM DESIGNATO*/~
                             width,                /* EXACT WIDTH      */~
                             height,               /* EXACT HEIGHT     */~
                             #1,                   /* AMTBOMCD EQUATION*/~
                             err% )                /* ERROR CODE 0%-OK */
            if err% <> 0% then error% = 5%         /* Equation Error   */
L62670:     init(" ") phantom$
            if scr_code% <> 1% then return
               if err% = 0% then return
                  errormsg$ = err$(error%)
                  gosub error_prompt
                  init(" ") errormsg$
        return

        spec_half                                    /* MOD - 06/04/97 */
             height =((s_height/2.0) - s_half)                           ~
                                             + ((s_height/2.0) - s_clmr )
             init(" ") phantom$
        return
        spec_full
             height =((s_height/2.0) - s_full)                           ~
                                            - ((s_height/2.0)  - s_clmr )
             init(" ") phantom$
        return

        deffn'099(textid$)
            txt% = 0%
            if textid$ = hex(00000000) or textid$ = hex(ffffffff)        ~
                                           or textid$ = " " then return
            txt% = 1%
        return

        lookup_text                           /* Look Up Text Id       */
            if textid$ = dt_txt$ then return
            init(" ") txt_flag$, textid$
            textid$ = dt_txt$
            gosub'099(textid$)
            if txt% = 1% then txt_flag$ = "*"
        return
                                       /* Pass% = 0% Reg. Screen Report*/
        print_report_screen            /* Pass% = 1% Center Bar Report */
            init(" ") date$, rpt_time$, title$
            lcnt% = 99%   :  pageno% = 0%
            date$ = date  :  call "DATEFMT" (date$)
            call "TIME" (rpt_time$)
            if pass% = 0% then call "SETPRNT" (" ","SC01", 0%, 0%)       ~
                          else call "SETPRNT" (" ","SC02", 0%, 0%)
            select printer (134)
            title$ = "Ellison Windows and Doors"
            if pass% = 0% then                                           ~
               call "SHOSTAT" ("Printing Consolidated Report for Screen")~
               else call "SHOSTAT" ("Printing Center Bar Report")

            init(" ") sav_dept_scr$, wrk_key$
            dd% = 0%
            read #5,key > wrk_key$, using L62955, wrk_rec$, wrk_qty%,     ~
                      wd$, ht$, wd1$, ht1$, eod goto report_done_screen
            dd% = 1%
            sav_dept_scr$ = str(wrk_rec$,2%,1%)
            goto L62965
        print_next_screen
            read #5, using L62955, wrk_rec$, wrk_qty%, wd$, ht$,          ~
                                  wd1$, ht1$, eod goto report_done_screen
L62955:       FMT CH(60), BI(2), CH(7), CH(6), CH(9), CH(8)

L62965:     dept_scr$  = str(wrk_rec$,2%,1%)        /* Dept Sort Code  */
            dt_dept$   = str(wrk_rec$,3%,3%)        /* Dept Code       */
            model$     = str(wrk_rec$,48%,3%)       /* Model Code      */
            sc$        = str(wrk_rec$,45%,1%)       /* Screen Code     */
            cl$        = str(wrk_rec$,60%,1%)       /* Color Code      */
            wd2$       = str(wrk_rec$,36%,9%)       /* CB Cut Length   */
            hg$        = str(wrk_rec$,46%,2%)       /* Hinge Code      */
            ht2$       = str(wrk_rec$,51%,9%)       /* CB Location     */

            if pass% = 0% then goto L63025
               if len(wd2$) < 2 then goto print_next_screen
                                                    /* Center Bar Only */
L63025:     convert wrk_qty% to qty$, pic(#####)

            if str(wrk_rec$,6%,3%) <> "ERR" then goto L63085
               cl_l$  = "**"
               sc_r$  = "***** (Error) ******"
               wd1$   = "*********"
               ht1$   = "********"
               wd2$   = "*********"
               grid$  = str(wrk_rec$,11%,25%)
               hnge$  = "No Equation Found"
               goto L63145

L63085:     if sav_dept_scr$ = dept_scr$ then goto L63110
               dd% = pos(sort$ = sav_dept_scr$)
               gosub print_total
               sav_dept_scr$ = dept_scr$

L63110:     gosub lookup_color
            gosub lookup_screen
            gosub lookup_hinge
            init(" ") grid$                      /* Set Center Bar Loc */
            grid$ = "        *** **/**        "  /* APC MOD - 08/26/97 */
            if len(ht2$) > 1 then str(grid$,9%,9%) = ht2$

L63145:     gosub print_detail
            goto print_next_screen
        report_done_screen
            dd% = pos(sort$ = sav_dept_scr$)
            gosub print_total
            if pass% = 0% then call "SETPRNT" (" ","SC01", 0%, 1%)       ~
                          else call "SETPRNT" (" ","SC02", 0%, 1%)
        return

        print_labels_screen
            init(" ") lab_key$, lab_rec$
            call "SETPRNT" (" ","SC03", 0%, 0%)
            select printer (134)
            call "SHOSTAT" ("Printing Piece Labels for Screen'S.")
            for i% = 1% to 6%
                print using L55490
                print using L55490
                print
            next i%
            read #6,key > lab_key$, using L63265, lab_rec$,               ~
                                              eod goto screen_labels_done
            goto L63270
        screen_labels_next
            read #6, using L63265, lab_rec$, eod goto screen_labels_done
L63265:       FMT CH(200)
L63270:     view$      = str(lab_rec$,66%,1%)       /* View            */
            model$     = str(lab_rec$,67%,3%)       /* Model Code      */
            co_or$     = str(lab_rec$,70%,8%)       /* Cot/Or-Samp,Disp*/
            dt_so$     = str(lab_rec$,78%,8%)       /* Sales Order     */
            dt_seq$    = str(lab_rec$,86%,5%)       /* Seq Number      */
            wd1$       = str(lab_rec$,91,9%)        /* Width           */
            ht1$       = str(lab_rec$,100%,8%)      /* Height          */
            wd2$       = str(lab_rec$,108%,9%)      /* CB Cut Length   */
            wd$        = str(lab_rec$,117%,7%)      /* Window Width    */
            ht$        = str(lab_rec$,124%,6%)      /* Window Height   */
            dt_txt$    = str(lab_rec$,130%,4%)      /* Text Id.        */
            cl$        = str(lab_rec$,134%,1%)      /* Color Code      */
            hg$        = str(lab_rec$,135%,2%)      /* Hinge Code      */
            sc$        = str(lab_rec$,137%,1%)      /* Screen Code     */
            ht2$       = str(lab_rec$,51% ,9%)      /* CB Location     */

            gosub lookup_color
            gosub lookup_hinge
            gosub lookup_screen
            gosub lookup_text
            gosub print_labels_detail
            goto screen_labels_next
        screen_labels_done
            call "SETPRNT" (" ","SC03", 0%, 1%)
        return

        load_tables
           call "SHOSTAT" ("Loading Screen Batch/Sort Codes")
           sort$ = "123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
           /*  BATCH%(DD%,1%) -> Batch Size Limit from Table       */
           /*  BATCH%(DD%,2%) -> Screen Counter                    */
           /*  BATCH%(DD%,3%) -> Half Screen Counter               */
           /*  BATCH%(DD%,4%) -> Full Screen Counter               */
           /*  BATCH%(DD%,5%) -> Cottage/Oriel Counter             */
           /*  BATCH%(DD%,6%) -> Sample/Display Counter            */
           /*  DEPT$()              -> Dept. Code                  */

           init(" ") readkey$, dept$()
           mat batch% = zer
           dept_max% = 0% : dd% = 0%
           str(readkey$,1%,9%)   = "SCREEN07 "
        load_next
           read #3,key > readkey$,using L63490, readkey$, descr$,         ~
                                                         eod goto L63535
L63490:       FMT CH(24), CH(30)
           if str(readkey$,1%,9%) <> "SCREEN07 " then goto L63535
              if str(readkey$,10%,3%) = "000" then goto load_next
              dd% = dd% + 1%
              dept$(dd%)   = str(descr$,1%,3%)     /* Store Dept Code */
              batch_amt$   = str(descr$,6%,4%)     /* Store Batch Size*/
              convert batch_amt$ to batch%(dd%,1%),data goto L63545

              goto load_next
L63535:    dept_max% = dd%
        return
L63545:    errormsg$ = "(Error) Problem Initializing Batch Array?"
           gosub error_prompt
           goto exit_program
        return

        error_prompt
           comp% = 2%
           hdr$ = "***** (Error) (Error) (Error)  *****"
           msg$(1%) = " - - - - - - - - E r r o r - - - - - - - - "
           msg$(2%) = errormsg$
           msg$(3%) = "Press Any Key To Continue."
           call "ASKUSER" (comp%, hdr$, msg$(1%), msg$(2%), msg$(3%))
        return

        open_work
            if mode% = 1% then mode$ = "OUTPT"
            if mode% = 2% then mode$ = "INPUT"
            if mode% = 3% then mode$ = "SHARE"

            call "WORKOPN2" (#5,mode$, 500%, f2%)
               if f2% <> 0% then goto L63665
            call "WORKOPN2" (#6,mode$, 500%, f2%)
               if f2% <> 0% then goto L63680
        return
L63665:     errormsg$ = "Error - Cannot Open (APCPLNW1)"
            gosub error_prompt
        return
L63680:     errormsg$ = "Error - Cannot Open (APCPLNW2)"
            gosub error_prompt
        return
        delete_work
            call "FILEBGON" (#5)
            call "FILEBGON" (#6)
        return

        check_screen                     /* Done once per MFG Product  */
            if sav_screen$ = dt_part$ then return
            init(" ") readkey$, desc$, wt$, wcode$, skey$, sqty$, sc$,   ~
                      model$, sav_screen$, hg$
            sav_screen$ = dt_part$
            model$ = str(dt_part$,1%,3%)
            check% = 0% : error% = 0% : sqty% = 1%
            hg$ = str(dt_part$,9%,2%)          /* Set Hinge Code       */
            sc$ = str(dt_part$,11%,1%)         /* Set Screen Code      */
            p% = pos("12389ABCD" = sc$)        /* Valid Screen Options */
            if p% = 0% then return
            str(readkey$,1%,9%)   = "SCREEN04 " /* Scrn Master Control */
            str(readkey$,10%,15%) = model$      /* Product Code        */
            read #3,key = readkey$,using L63795, wt$, wcode$,             ~
                                                     eod goto L63950
L63795:       FMT POS(25), CH(3), XX(3), CH(1) /* WT$ - Window Type    */
                                               /* WCODE$ - A thru E    */
            if wcode$ = "E" then return        /* No Screen Required   */

            str(skey$,1%,1%) = wcode$          /* Set Window Type Code */
            str(skey$,2%,2%) = "NO"            /* Set to (NO)rmal      */
            gosub lookup_hinge                 /* Check Hinge Code     */
            if wcode$ <> "A" then goto L63850   /* 1st Check Type 'A'   */
               if str(hh$,1%,2%) = "CO" or str(hh$,1%,2%) = "OR" then    ~
                                      str(skey$,2%,2%) = str(hh$,1%,2%)

L63850:     str(skey$,4%,1%) = "H"             /* Set to Half Screen   */
            if sc$ = "2" then str(skey$,4%,1%) = "F"  /* Full Screen   */
            if sc$ = "C" then str(skey$,4%,1%) = "F"  /* Full Screen   */
            if wcode$ <> "C" then goto L63885
               sqty% = 2%
               str(skey$,4%,1%) = "4"          /* Special 1/4,1/2,1/4  */
               if triple% <> 0% then str(skey$,4%,1%) = "3" /* Special */

L63885:     if wcode$ <> "D" then goto L63940   /* Multiple Screens     */
               str(skey$,4%,1%) = "H"          /* Half Screen Only     */
               init(" ") readkey$, desc$
               str(readkey$,1%,9%)   = "GLASS01  " /* Screen Quantities*/
               str(readkey$,10%,3%)  = model$      /* Product Code     */
               str(readkey$,13%,12%) = hg$         /* Hinge Code       */
               read #3,key = readkey$, using L63920, sqty$, eod goto L63940
L63920:           FMT POS(28), CH(2)
               convert sqty$ to sqty%, data goto L63930
L63930:
            if sqty% = 0% then return          /* No Screen Required   */
L63940: check% = 1%
        return
L63950:     error% = 1%                       /* Product not on File   */
            if scr_code% <> 1% then return
               errormsg$ = err$(error%)
               gosub error_prompt
               init(" ") errormsg$
        return
            error% = 2%                  /* Screen QTY's not on File   */
            if scr_code% <> 1% then return
               errormsg$ = err$(error%)
               gosub error_prompt
               init(" ") errormsg$
        return

        REM *************************************************************~
            *                          E X I T                          *~
            *-----------------------------------------------------------*~
            * Terminates execution (files closed automatically).        *~
            *-----------------------------------------------------------*

        exit_program
            call "SHOSTAT" ("One Moment Please")

            end

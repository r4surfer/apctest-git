        REM THISPROGRAMWASGENERATEDUSINGTHEGENPGMPROGRAMWHICHISAPROPRIETR~
            *                                                           *~
            *  H   H  N   N  Y   Y  PPPP   IIIII   CCC    AAA   PPPP    *~
            *  H   H  NN  N  Y   Y  P   P    I    C   C  A   A  P   P   *~
            *  HHHHH  N N N   YYY   PPPP     I    C      AAAAA  PPPP    *~
            *  H   H  N  NN    Y    P        I    C   C  A   A  P       *~
            *  H   H  N   N    Y    P      IIIII   CCC   A   A  P       *~
            *                                                           *~
            *-----------------------------------------------------------*~
            * HNYPICAP - Captures the current on-hand quantities and the*~
            *            'average' unit costs from the HNYQUAN file     *~
            *            and stores them under the current 'Session'.   *~
            *            In effect makes a copy of the entire HNYQUAN   *~
            *            file (on-hand qty & costs only) for the        *~
            *            current count session.                         *~
            *----------------------------------------------------------Q*~
            * THIS PROGRAM CONTAINS VALUABLE TRADE SECRETS AND PROPRIE- *~
            * TARY ASSETS OF CAELUS ASSOCIATES, INC., SPOKANE, WA, EM-  *~
            * BODYING SUBSTANTIAL CREATIVE EFFORTS  AND CONFIDENTIAL    *~
            * INFORMATION.  UNAUTHORIZED USE, COPYING, DECOMPILING,     *~
            * TRANSLATING, DISCLOSURE, OR TRANSFER OF IT IS PROHIBITED. *~
            * COPYRIGHT (C) 1986  AN UNPUBLISHED WORK BY CAELUS ASSSO-  *~
            * CIATES, INC., SPOKANE, WA.  ALL RIGHTS RESERVED.          *~
            *-----------------------------------------------------------*~
            *                  M O D I F I C A T I O N S                *~
            *---WHEN---+----------------WHAT----------------------+-WHO-*~
            * 01/20/86 ! Original                                 ! LDJ *~
            * 03/19/87 ! Enhancement change; Now keeps snapshot   ! LDJ *~
            *          !   of HNYQUAN in separate file, destinct  !     *~
            *          !   from Tickets.  Significant file layout !     *~
            *          !   changes for this reason and in prep for!     *~
            *          !   next major release (12 cost buckets!). !     *~
            * 05/21/87 ! Changes for Std Cost Enhancements        ! MJB *~
            * 01/02/92 ! Added 'SHOSTAT' and 'ALLFREE'            ! SID *~
            * 05/22/92 ! For PRR 11453 & Cycle Count Project.     ! RJH *~
            *          !  Capture only the Ticket Part/Store/Lots !     *~
            *          !  if no blank tickets exist. For PRR 11453!     *~
            *          !  Add PF(17) Key to set Purge before      !     *~
            *          !  default in SYSFILE2                     !     *~
            * 09/24/92 ! PRR 12051 - Location Snapshot File.      ! RJH *~
            * 10 04/93 ! PRR 13026 - Allow Blank tickets for locat! RJH *~
            *          !  ions in Cycle Counting ie. always short !     *~
            *          !  snapshot for Cycle Counting.            !     *~
            PRODUCTOFCAELUSASSOCIATESSPOKANEWASHINGTONALLRIGHTSRESERVED**

        dim                                                              ~
            cost(12),                    /* Cost Buckets               */~
            cost$96,                     /* For PACKZERO               */~
            cursor%(2),                  /* Cursor location for edit   */~
            date$8,                      /* Date for screen display    */~
            edtmessage$79,               /* Edit screen message        */~
            errormsg$79,                 /* Error message              */~
            i$(24)80,                    /* Screen Image               */~
            inpmessage$79,               /* Informational Message      */~
            lfac$(20)1,                  /* Field Attribute Characters */~
            line2$79,                    /* Second Line of Screen Headr*/~
            loc$8,                       /* Location                   */~
            lot$16,                      /* Lot                        */~
            lot_or_loc$1,                /* Tickets Generated by Lot or*/~
            message$79,                  /* Informational Message      */~
            part$25,                     /* Part Code                  */~
            pf$(3)79,                    /* PF Screen Literal          */~
            pfkeys$32,                   /* PF Keys Hex Values         */~
            plowkey$100,                 /* Miscellaneous Plow Key     */~
            purgeflag$1,                 /* Purge Flag for Cost File   */~
            purgemsg$35,                 /* Purge Modifiable Message   */~
            readkey$100,                 /* Miscellaneous Read Key     */~
            session_nbr$2,               /* Count Session Number       */~
            session_nbrdescr$32,         /* Count Session Number       */~
            source$1,                    /* Session Source (CC or PI)  */~
            store$3,                     /* Warehouse                  */~
            temppurgeflag$1,             /* Purge Flag for Cost File   */~
            tempsession$2,               /* Count Session Number       */~
            userid$3,                    /* Current User Id            */~
            xtra_ticket$6                /* Number of Blank tickets    */~

        dim f2%(32),                     /* = 0 if the file is open    */~
            f1%(32),                     /* = 1 if READ was successful */~
            fs%(32),                     /* = 1 if file open, -1 if it */~
                                         /*   doesn't exist, or 0 if   */~
                                         /*   not yet checked (OPENCHCK*/~
            rslt$(32)20                  /* Text from file opening     */

        REM *************************************************************~
            *                  Release Version ID Section               *~
            *************************************************************
            dim cms2v$50
            cms2v$ = "R6.03.00 03/02/94 General Release  Purchase Jobs  "
        REM *************************************************************

            mat f2% = con

                     /* The variable F2%() should not be modified.     */
                     /* FS%() also should not be modified (see         */
                     /* OPENCHCK).                                     */

        REM *************************************************************~
            *                  S E L E C T   F I L E S                  *~
            *                                                           *~
            *-----+----------+------------------------------------------*~
            *FILE#!  PRNAME  ! D E S C R I P T I O N                    *~
            *-----+----------+------------------------------------------*~
            * #1  ! HNYPISYS ! Physical Inventory System Session Contro *~
            * #2  ! HNYPICST ! Physical Inventory Costs Snapshot File   *~
            * #3  ! HNYMASTR ! Inventory Master File                    *~
            * #4  ! HNYQUAN  ! Inventory Part / Store / Lot Quantity Fi *~
            * #5  ! SYSFILE2 ! System Records File                      *~
            * #6  ! HNYPITKT ! Physical Inventory Ticket File           *~
            * #7  ! HNYLOCNS ! Part Location Master File                *~
            * #8  ! HNYPILOC ! Physical Inventory Location Snapshot File*~
            *************************************************************~
            *       File Selection and Open Calls                       *~
            *************************************************************

            select #1,  "HNYPISYS",                                      ~
                        varc,     indexed,  recsize =  512,              ~
                        keypos =    7, keylen =   2,                     ~
                        alt key  1, keypos =    1, keylen =   8          ~

            select #2,  "HNYPICST",                                      ~
                        varc,     indexed,  recsize =  256,              ~
                        keypos =    1, keylen =  46                      ~

            select #3,  "HNYMASTR",                                      ~
                        varc,     indexed,  recsize =  900,              ~
                        keypos =    1, keylen =  25,                     ~
                        alt key  1, keypos =  102, keylen =   9, dup,    ~
                            key  2, keypos =   90, keylen =   4, dup     ~

            select #4,  "HNYQUAN",                                       ~
                        varc,     indexed,  recsize =  650,              ~
                        keypos =   17, keylen =  44,                     ~
                        alt key  1, keypos =    1, keylen =  44

            select #5,  "SYSFILE2",                                      ~
                        varc,     indexed,  recsize =  500,              ~
                        keypos  =  1, keylen =  20

            select #6,  "HNYPITKT",                                      ~
                        varc,     indexed,  recsize =  512,              ~
                        keypos  =  1, keylen =  15,                      ~
                        alt key  1, keypos =   16, keylen =  52 , dup,   ~
                            key  2, keypos =  313, keylen =  16

            select #7,  "HNYLOCNS",                                      ~
                         varc,                                           ~
                         indexed,                                        ~
                         recsize = 700,                                  ~
                         keypos = 1, keylen = 42,                        ~
                        alt key  1, keypos =  443, keylen =  42,         ~
                            key  2, keypos =  485, keylen =  42,         ~
                            key  3, keypos =  527, keylen =  42,         ~
                            key  4, keypos =  590, keylen =  42          ~

            select #8,  "HNYPILOC",                                      ~
                        varc,                                            ~
                        indexed,                                         ~
                        recsize = 100,                                   ~
                        keypos =    1, keylen =  44

            call "SHOSTAT" ("Opening Files, One Moment Please...")

                rslt$(1%) = "REQUIRED"
            call "OPENCHCK" (#1,  fs%(1%), f2%(1%), 0%, rslt$(1%))
                rslt$(3%) = "REQUIRED"
            call "OPENCHCK" (#3,  fs%(3%), f2%(3%), 0%, rslt$(3%))
            call "OPENCHCK" (#4,  fs%(4%), f2%(4%), 0%, rslt$(4%))
            records% = val(str(rslt$(4%),17%,4%),4)
                rslt$(2%) = "REQUIRED"
            call "OPENCHCK" (#2,  fs%(2%), f2%(2%),records% /4%,rslt$(2%))
            call "OPENCHCK" (#5,  fs%(5%), f2%(5%), 0%, rslt$(5%))
            call "OPENCHCK" (#6,  fs%(6%), f2%(6%), 0%, rslt$(6%))

        REM Location Files #7 & #8 are opened only if needed

            if f2%(1%) + f2%(2%) + f2%(3%) > 0% then exit_program

        REM *************************************************************~
            *                I N I T I A L I Z A T I O N                *~
            *-----------------------------------------------------------*~
            * Initializes information necessary for program.            *~
            *************************************************************
            call "EXTRACT" addr("ID", userid$)
            date$ = date
            call "DATEFMT" (date$)

            edtmessage$  = "To Modify Displayed Values, Position Cursor"&~
                           " to Desired Value and Press (RETURN)."

*        See if User is a Module Administrator or not...
            call "CMSMACHK" ("SFC", lfac$(1), lfac$(2))
            if lfac$(1) = "Y" or lfac$(2) = "Y" then admin% = 1%
            if str(userid$,,2) = "RN" then admin% = 1%

*        Load Program Switchs Record...
            call "READ100" (#05, "PI.CAP.FLAG", f1%)
            if f1% = 1% then L09240
                put #05 using L09220, "PI.CAP.FLAG", " ", "N", " "

L09220:             FMT CH(20), CH(1), CH(79)
                write #05
L09240:     get #05 using L09260, purgeflag$

L09260:         FMT POS(21), CH(1)



        REM *************************************************************~
            *       I N P U T   M O D E   M A I N   P R O G R A M       *~
            *-----------------------------------------------------------*~
            * Handles normal input for data entry screens.              *~
            *************************************************************

        inputmode
            call "ALLFREE"

            init(" ")errormsg$, inpmessage$, purgemsg$, session_nbr$,    ~
                     session_nbrdescr$, temppurgeflag$

            for fieldnr% = 1 to  2
L10100:         gosub'051(fieldnr%)
                      if enabled% = 0 then L10220
L10120:         gosub'101(fieldnr%, 1%)
                      if keyhit%  =  1 then gosub startover
                      if keyhit% <>  4 then       L10200
L10150:                  fieldnr% = max(1%, fieldnr% - 1%)
L10160:                  gosub'051(fieldnr%)
                         if enabled% = 1% then L10120
                         if fieldnr% = 1% then L10100
                         goto L10150
L10200:               if keyhit%  = 16 then       exit_program
                      if keyhit%  = 17 then gosub mod_switchs
                      if keyhit%  = 17 then       L10160
                      if keyhit% <>  0 then       L10120
L10220:         gosub'151(fieldnr%)
                      if errormsg$ <> " " then L10120
            next fieldnr%

            goto edit_pg1
           /* *** END Input Mode *** */

        mod_switchs       /* Allow user to change program switchs      */
            save_fieldnr% = fieldnr%
L10280:     lastfieldnr% = 0%
L10290:     gosub'106(0%, 2%)           /* Display Screen - No Entry   */
                  if keyhit%  =  1% then gosub reset_switchs
                  if keyhit%  =  9% then       exit_switchs
                  if keyhit%  = 16% then       save_switchs
                  if keyhit% <>  0% then       L10290
L10340:     fieldnr% = cursor%(1%) - 5%
            if fieldnr% < 1% or fieldnr% >  7% then mod_switchs
            if fieldnr% = lastfieldnr% then L10280
            gosub'056(fieldnr%)         /* Set Input Message           */
L10380:     gosub'106(fieldnr%, 2%)     /* Display & Accept Screen     */
                  if keyhit% <>  0% then L10380
            gosub'156(fieldnr%)         /* Edit Field for Valid Entry  */
                  if errormsg$ <> " " then L10380
                  lastfieldnr% = fieldnr%
            goto L10340

        reset_switchs     /* Set switches to what's stored on file     */
            call "READ100" (#05, "PI.CAP.FLAG", f1%)
            get #05 using  L09260, purgeflag$

            return

        save_switchs
            call "READ101" (#05, "PI.CAP.FLAG", f1%)
            put #05 using  L09260, purgeflag$


            rewrite #05

        exit_switchs
            keyhit%  = 17%
            fieldnr% = save_fieldnr%

            return

        REM *************************************************************~
            *        E D I T   M O D E   M A I N   P R O G R A M        *~
            *-----------------------------------------------------------*~
            * Handles operation of EDIT MODE for data entry screens.    *~
            *************************************************************
        edit_pg1
            inpmessage$ = edtmessage$

L11060:     gosub'101(0%, 2%)
                  if keyhit%  =  1 then gosub startover
                  if keyhit%  = 16 then       datasave
                  if keyhit% <>  0 then       L11060
            fieldnr% = cursor%(1) - 13
            if fieldnr% < 1 or fieldnr% >  2 then L11060
            gosub'051(fieldnr%)
                  if enabled% = 0% then       L11060
L11140:     gosub'101(fieldnr%, 2%)
                  if keyhit%  =  1 then gosub startover
                  if keyhit% <>  0 then L11140
            gosub'151(fieldnr%)
                  if errormsg$ <> " " then L11140
            goto L11060

        REM *************************************************************~
            *             S A V E   D A T A   O N   F I L E             *~
            *-----------------------------------------------------------*~
            * Saves data on file after INPUT/EDITING.                   *~
            *************************************************************

        datasave
            if temppurgeflag$ = "Y" then gosub purge_cost
            call "SHOSTAT" ("Quantities & Costs 'Snapshot' Now in Progres~
        ~s...")
          /* Check for Blank Tickets, if none make shorter picture file */
            call "READ100" (#1, session_nbr$, f1%(1))
            REM *** IF THIS READ FAILS ... ***
            get #1 using  L19170 , xtra_ticket$, source$
            if xtra_ticket$ > "0" and source$ <> "C" then L19090
                gosub plow_ticket_file
                goto L19110
          /* End Blank Ticket check */
L19090:     plowkey$ = " "
            gosub plow_hnyquan
            plowkey$ = " "
            if lot_or_loc$ = "L" then gosub plow_hnylocns

L19110:     call "READ101" (#1, session_nbr$, f1%(1))
            REM *** IF THIS READ FAILS ... ***
            put #1 using L19160, date, time
            rewrite #1
            goto inputmode
L19160:     FMT POS(353), CH(6), CH(6)
L19170:     FMT POS(336), CH(6), POS(371), CH(1)

        plow_hnyquan
            call "PLOWNEXT" (#4, plowkey$, 0%, f1%(4))
            if f1%(4) = 0% then return
            mat cost = zer
            gosub dataload
            gosub  write_to_costfile
            goto plow_hnyquan

        try_for_standard
            call "STCCOSTS" (part$, " ", #5, 2%, tot_cost, cost())
            return

        plow_ticket_file
            plowkey$ = str(session_nbr$) & hex(00)
            call "READ104" (#6, plowkey$, f1%(6))
L19372:     if f1%(6) = 0 then return
            get #6 using L19445, tempsession$, part$, store$, lot$, loc$
            if part$ = " " then return  /*Must be CC Session & Extra Tic*/
            if tempsession$ > session_nbr$ then return  /* Next Session */
            readkey$ = str(part$) & str(store$) & lot$
            call "READ100" (#4, readkey$, f1%(4%))
            if f1%(4) = 0 then goto L19400  /* Try Another */
            mat cost = zer
            gosub dataload
            gosub  write_to_costfile
L19400:     if lot_or_loc$ = "L" then gosub write_to_locfile
            call "READNEXT" (#6, f1%(6))
            goto L19372

L19445:     FMT CH(2), POS(16), CH(25), CH(3), CH(16),CH(8)

        write_to_costfile
            readkey$ = str(session_nbr$) & str(part$) & str(store$) & lot$
            call "READ101" (#2, readkey$, f1%(2))
            if method$ = "S" or method$ = "T" or method$ = "F"           ~
                           then gosub try_for_standard
            call "PACKZERO" (cost(), cost$)
            gosub dataput
            if f1%(2) = 1% then rewrite #2   else   write #2
            return

        purge_cost
            call "SHOSTAT" ("Purging Snapshot File(s) for Session")
            call "DELETE" (#2, session_nbr$, 2%)
            call "DELETE" (#8, session_nbr$, 2%)
            return

        write_to_locfile
            readkey$ = str(store$) & str(loc$) & str(part$) &            ~
                       str(lot$,,6%)
            call "READ100" (#7, readkey$, f1%(7%))
                if f1%(7%) = 0% then return      /* No Location Data */
            get #7 using L19800, locquan
            readkey$ = str(session_nbr$) & str(part$) & str(store$) &    ~
                       str(lot$,,6%) & loc$
            call "READ101" (#8, readkey$, f1%(8%))
            put #8  using L19810, readkey$, locquan, " "
                if f1%(8%) = 1% then rewrite #8   else   write #8
            return


L19800: FMT POS(573), PD(14,4)                    /* Location Quantity */
L19810: FMT CH(44), PD(14,4), CH(48)              /* Location Snapshot */
L19820: FMT CH(3), CH(8), CH(25), CH(6), POS(573), PD(14,4) /*Locations*/

        plow_hnylocns
            call "PLOWNEXT" (#7, plowkey$, 0%, f1%(7%))
            if f1%(7%) = 0% then return
            get #7 using L19820, store$, loc$, part$, lot$, locquan
            readkey$ = str(session_nbr$) & str(part$) & str(store$) &    ~
                       str(lot$,,6%) & loc$
            call "READ101" (#8, readkey$, f1%(8%))
            put #8  using L19810, readkey$, locquan, " "
                if f1%(8%) = 1% then rewrite #8   else   write #8
            goto plow_hnylocns

        REM *************************************************************~
            *     D E F A U L T / E N A B L E   F O R   P A G E   1     *~
            *-----------------------------------------------------------*~
            * Sets DEFAULTS and ENABLES fields for Screen  1  of Input. *~
            *************************************************************

            deffn'051(fieldnr%)
                  enabled% = 1%
                  on fieldnr% gosub L20100,         /* Count Session Num*/~
                                    L20200          /* Purge Flag       */
                     return
L20100:     REM Default/Enable for Count Session Number
                inpmessage$ = "Enter the Count Session Number to"        ~
                            & " Capture or RETURN to Find."
                return
L20200:     REM Default/Enable for Purge Flag
                if admin% = 1% then  goto L20210
                inpmessage$ = " "  :  enabled% = 0%
                purgemsg$ = "(Modifiable by Mod. Admin. Only)"
                goto L20215
L20210:         inpmessage$ = "Enter the Purge Flag Value (Y or N)."
                purgemsg$ = " "
L20215:         if temppurgeflag$ = " " then temppurgeflag$ = purgeflag$
                if temppurgeflag$ = " " then temppurgeflag$ = "N"
                return

        /*  ***** Purge Screen Selection ******* */

        deffn'056(fieldnr%)
            enabled% = 1%
            on fieldnr% gosub L20570          /* Purge Flag             */

            return

L20570: REM Def/Enable Purge Flag
            message$ = "Enter Purge Flag for Purging Session Snaps" &    ~
                       "hots prior to Re-Capture (Y or N) "
            return


        REM *************************************************************~
            * THIS PROGRAM CONTAINS VALUABLE TRADE SECRETS AND PROPRIE- *~
            * TARY ASSETS OF CAELUS ASSOCIATES, INC., SPOKANE, WA, EM-  *~
            * BODYING SUBSTANTIAL CREATIVE EFFORTS  AND CONFIDENTIAL    *~
            * INFORMATION.  UNAUTHORIZED USE, COPYING, DECOMPILING,     *~
            * TRANSLATING, DISCLOSURE, OR TRANSFER OF IT IS PROHIBITED. *~
            * COPYRIGHT (C) 1986  AN UNPUBLISHED WORK BY CAELUS ASSSO-  *~
            * CIATES, INC., SPOKANE, WA.  ALL RIGHTS RESERVED.          *~
            *************************************************************

        REM *************************************************************~
            * S T A R T   O V E R   L A S T   C H A N C E   S C R E E N *~
            *-----------------------------------------------------------*~
            * Gives the User the ability to START OVER when he wants to *~
            * or will return User back to where they were.  Must push   *~
            * two buttons to start over for safety.                     *~
            *************************************************************

        startover
            u3% = 2%
            call "STARTOVR" (u3%)
            if u3% = 1% then return
            return clear all
            goto inputmode

        REM *************************************************************~
            *           L O A D   D A T A   F R O M   F I L E           *~
            *-----------------------------------------------------------*~
            * Loads data from File Record Area into Program Variables.  *~
            *************************************************************
        dataload

            get #4 using L35050,    /* FILE: HNYQUAN                    */~
            part$,          /* Part Number                             */~
            store$,         /* Store or Warehouse Code                 */~
            lot$,           /* Lot Number                              */~
            qoh,            /* quantity on-hand                        */~
            tot_cost,       /* Total Standard Cost                     */~
            cost( ),        /* 12 cost buckets                         */~
            method$         /* inventory costing method                */

            return

        REM *************************************************************~
            *          S T U F F   D A T A   I N T O   F I L E          *~
            *-----------------------------------------------------------*~
            * Stuffs data from Program Variables into File Record Area. *~
            *************************************************************
        dataput

            put   #2 using L35180,        /* FILE: HNYPICST             */~
            session_nbr$,   /* Number corresponding to a Inventory     */~
                            /* Count Session                           */~
            part$,          /* Part Number                             */~
            store$,         /* Store or Warehouse Code                 */~
                            /* Warehouse code                          */~
            lot$,           /* Lot Number                              */~
            qoh,            /* quantity on-hand                        */~
                            /* Frozen qty-on-hand from HNYQUAN record. */~
                            /* This is the 'snapshot' qty-on-hand.     */~
            cost$,          /* 12 cost buckets                         */~
            tot_cost,       /* Total Standard Cost                     */~
                            /*  These are the frozen or 'snapshot'     */~
                            /*  costs                                  */~
            " "             /* Filler (Internal, unused space)         */

            return

        REM *************************************************************~
            *        F O R M A T    S T A T E M E N T S                 *~
            *-----------------------------------------------------------*~
            * FORMAT Statements for Data Files.                         *~
            *************************************************************
L35050: FMT                 /* FILE: HNYQUAN                           */~
            POS(17),        /* Position for Field PART-NO              */~
            CH(25),         /* Part Number                             */~
            CH(3),          /* Store or Warehouse Code                 */~
            CH(16),         /* Lot Number                              */~
            POS(69),        /* Position for QTY-ON-HAND                */~
            PD(14,4),       /* quantity on-hand                        */~
            POS(117),       /* Position for Cost Fields                */~
            13*PD(14,4),    /* 1st - Total Standard Cost               */~
                            /* 2nd - 13th are the 12 cost buckets      */~
            POS(403),       /* Position for Field HNYCSTCD             */~
            CH(1)           /* inventory costing method                */

L35180: FMT                 /* FILE: HNYPICST                          */~
            CH(2),          /* Number corresponding to a Inventory     */~
                            /* Count Session                           */~
            CH(25),         /* Part Number                             */~
            CH(3),          /* Store or Warehouse Code                 */~
                            /* Warehouse code                          */~
            CH(16),         /* Lot Number                              */~
            PD(14,4),       /* quantity on-hand                        */~
                            /* Frozen qty-on-hand from HNYQUAN record. */~
                            /* This is the 'snapshot' qty-on-hand.     */~
            CH(96),         /* 12 cost buckets                         */~
            PD(14,4),       /* Total Standard Cost                     */~
                            /* These are the frozen or 'snapshot'      */~
                            /*  costs                                  */~
            CH(98)          /* Filler (Internal, unused space)         */~

        REM *************************************************************~
            *               S C R E E N   P A G E   1                   *~
            *-----------------------------------------------------------*~
            * Document input screen.                                    *~
            *************************************************************

            deffn'101(fieldnr%, edit%)
                  str(line2$,62%) = "HNYPICAP: " & str(cms2v$,,8%)
                  init(hex(84)) lfac$()
                  gosub set_pf1
                  on fieldnr% gosub L40150,         /* Count Session Num*/~
                                    L40150          /* Purge Flag       */
                  goto L40220

                  REM Set FAC's for Upper/Lower Case Input
                      lfac$(fieldnr%) = hex(80)
                      return
L40150:           REM Set FAC's for Upper Case Only Input
                      lfac$(fieldnr%) = hex(81)
                      return
                  REM Set FAC's for Numeric Only Input
                      lfac$(fieldnr%) = hex(82)
                      return

L40220:     accept                                                       ~
               at (01,02),                                               ~
                  "Capture Costs & Quantities",                          ~
               at (01,66), "Today:",                                     ~
               at (01,73), fac(hex(8c)), date$                  , ch(08),~
               at (02,02), fac(hex(ac)), line2$                 , ch(79),~
               at (04,02), fac(hex(94)), errormsg$              , ch(79),~
               at (05,02),                                               ~
        "  This program will capture, or take a 'snapshot' of, the curren~
        ~t on-hand     ",                                                 ~
               at (06,02),                                               ~
        "  quantities and costs for items in the Inventory Quantity & Loc~
        ~ation Files.  ",                                                 ~
               at (07,02),                                               ~
        "  The reason for this is so that variance reporting and posting ~
        ~may use       ",                                                 ~
               at (08,02),                                               ~
        "  the quantities and costs as of the date of the physical count ~
        ~(you must ",                                                     ~
               at (09,02),                                               ~
        "  make the determination as to when all inventory transactions p~
        ~rior to that  ",                                                 ~
               at (10,02),                                               ~
        "  date have been posted!).  This function may be run multiple ti~
        ~mes for the   ",                                                 ~
               at (11,02),                                               ~
        "  same Count Session but it is Important that you do not run it ~
        ~after post -  ",                                                 ~
               at (12,02),                                               ~
        "  count inventory transactions have updated the inventory quanti~
        ~ties!",                                                          ~
               at (14,04),                                               ~
                  "Count Session Number       ",                         ~
               at (14,34), fac(lfac$( 1)), session_nbr$         , ch(02),~
               at (14,46), fac(hex(8c)),   session_nbrdescr$    , ch(32),~
                                                                         ~
               at (15,04), "Purge Existing Snapshot Files",              ~
               at (15,35), fac(lfac$( 2)), temppurgeflag$       , ch(01),~
               at (15,46), fac(hex(8c))  , purgemsg$            , ch(34),~
                                                                         ~
               at (21,02), fac(hex(a4)),   inpmessage$          , ch(79),~
               at (22,02), fac(hex(8c)),   pf$(1)               , ch(79),~
               at (23,02), fac(hex(8c)),   pf$(2)               , ch(79),~
               at (24,02), fac(hex(8c)),   pf$(3)               , ch(79),~
                                                                         ~
               keys(pfkeys$), key(keyhit%)

               if keyhit% <> 13 then L40460
                  call "MANUAL" ("HNYPICAP")
                  goto L40220

L40460:        if keyhit% <> 15 then L40480
                  call "PRNTSCRN"
                  goto L40220

L40480
*             IF FIELDNR% > 0% THEN RETURN
                  close ws
                  call "SCREEN" addr ("C", u3%, "I", i$(), cursor%())
                  return

        set_pf1
        if edit% = 2% then L40670     /*  Input Mode             */
            pf$(1) = "(1)Start Over                           " &        ~
                     "                       (13)Instructions"
            pf$(2) = "                 (4)Previous Field      " &        ~
                     "                       (15)Print Screen"
            pf$(3) = "(17)Set Purge Switch                    " &        ~
                     "                       (16)Exit Program"
            pfkeys$ = hex(01ffff04ffffffffffffffff0dff0f101100)
            if fieldnr% = 1% then L40630
                                            str(pfkeys$,16,1) = hex(ff)
L40630:     if fieldnr% > 2% then L40650
                str(pf$(2),18,26) = " "  :  str(pfkeys$, 4,1) = hex(ff)
            if admin% = 1% then L40780
                str(pf$(3),,18) = " "
                str(pfkeys$,17,1) = hex(ff)
L40650:     return

L40670: if fieldnr% > 0% then L40790  /*  Edit Mode - Select Fld */
            pf$(1) = "(1)Start Over                           " &        ~
                     "                       (13)Instructions"
            pf$(2) = "                                        " &        ~
                     "                       (15)Print Screen"
            pf$(3) = "                                        " &        ~
                     "                       (16)Capture     "
            pfkeys$ = hex(01ffffffffffffffffffffff0dff0f1000)


L40780:     return
L40790:                              /*  Edit Mode - Enabled    */
            pf$(1) = "(1)Start Over                           " &        ~
                     "                       (13)Instructions"
            pf$(2) = "                                        " &        ~
                     "                       (15)Print Screen"
            pf$(3) = "                                        " &        ~
                     "                                       "
            pfkeys$ = hex(01ffffffffffffffffffffff0dff0fff00)
            return


        REM *************************************************************~
            *               S W I T C H S   S C R E E N                 *~
            *-----------------------------------------------------------*~
            * Document Input and Edit Screen.                           *~
            *************************************************************

        deffn'106(fieldnr%, edit%)
              gosub set_pf6
              if fieldnr% > 0% then init(hex(8c)) lfac$()                ~
                               else init(hex(86)) lfac$()
              on fieldnr% gosub L41200          /* purge Flag        */
              goto L41230
                  lfac$(fieldnr%) = hex(80)  :  return  /* Up / Low   */
L41200:           lfac$(fieldnr%) = hex(81)  :  return  /* Upper Only */
                  lfac$(fieldnr%) = hex(82)  :  return  /* Numeric    */

L41230:     accept                                                       ~
               at (01,02),                                               ~
                  "Capture Cost File : Manage Program Switchs",          ~
               at (01,66), "Today:",                                     ~
               at (01,73), fac(hex(8c)), date$                  , ch(08),~
               at (02,02), fac(hex(ac)), line2$                 , ch(79),~
               at (04,02), fac(hex(94)), errormsg$              , ch(79),~
                                                                         ~
               at (06,02), "Purge Flag  ",                               ~
               at (06,20), fac(lfac$(01)), purgeflag$           , ch(01),~
                                                                         ~
               at (21,02), fac(hex(a4)),   message$             , ch(79),~
               at (22,02), fac(hex(8c)),   pf$(1)               , ch(79),~
               at (23,02), fac(hex(8c)),   pf$(2)               , ch(79),~
               at (24,02), fac(hex(8c)),   pf$(3)               , ch(79),~
                                                                         ~
               keys(pfkeys$), key(keyhit%)

               if keyhit% <> 13 then L41740
                  call "MANUAL" ("NEWSCRN ") : goto L41230

L41740:        if keyhit% <> 15 then L41770
                  call "PRNTSCRN" : goto L41230

L41770:        call "GETSCRN" ("C", i$(), cursor%(), u3%)
               return

        set_pf6
        if edit% = 2% then L41950     /*  Input Mode             */
            pf$(1) = "(1)Start Over                           " &        ~
                     "                       (13)Instructions"
            pf$(2) = "                                        " &        ~
                     "                       (15)Print Screen"
            pf$(3) = "                                        " &        ~
                     "                       (16)Exit Program"
            pfkeys$ = hex(01ffffffffffffffffffffff0dff0f1000)
            if fieldnr% = 1% then L41910
                str(pf$(3),64)    = " "  :  str(pfkeys$,16,1) = hex(ff)
L41910:     if fieldnr% > 2% then L41930
                str(pf$(2),18,26) = " "  :  str(pfkeys$, 4,1) = hex(ff)
L41930:     return

L41950: if fieldnr% > 0% then L42060  /*  Edit Mode - Select Fld */
            message$ = "To Modify a field, position cursor and press" &  ~
                       " RETURN."
            pf$(1) = "(1)Reset Switch                         " &        ~
                     "                       (13)Instructions"
            pf$(2) = "                                        " &        ~
                     "                       (15)Print Screen"
            pf$(3) = "                                        " &        ~
                     "                       (16)Save Data   "
            pfkeys$ = hex(01ffffffffffffffffffffff0dff0f1000)
            return
L42060:                              /*  Edit Mode - Enabled    */
            pf$(1) = "                                        " &        ~
                     "                       (13)Instructions"
            pf$(2) = "                                        " &        ~
                     "                       (15)Print Screen"
            pf$(3) = "                                        " &        ~
                     "                                       "
            pfkeys$ = hex(01ffffffffffffffffffffff0dff0fff00)
            return


        REM *************************************************************~
            *                     T E S T   D A T A                     *~
            *-----------------------------------------------------------*~
            * Test data for the items on Screen 1.                      *~
            *************************************************************

            deffn'151(fieldnr%)
                  errormsg$ = " "
                  on fieldnr% gosub L50100,         /* Count Session Num*/~
                                    L50200          /* Purge Flag       */
                  return
L50100:     REM Test Data for Count Session Number
                call "GETCODE" (#1, session_nbr$,session_nbrdescr$, 1%,  ~
                                0, f1%(1))
                if f1%(1) = 0% then errormsg$ =                          ~
                   "Session Undefined or None on File"                   ~
                else get #1, using L50195, lot_or_loc$
                if lot_or_loc$ <> "L" then return
               call "OPENCHCK" (#7, 0%, f2%(8%), 0%, rslt$(8%))
               call "OPENCHCK" (#8, 0%, f2%(8%), records% / 4%, rslt$(8%))
                return
L50195:         FMT POS(319), CH(1)

L50200:     REM Test Data for Purge Flag
            p% = pos("YN" = temppurgeflag$)
            if p% <> 0% then return
                errormsg$ = "Enter 'Y' or 'N' for Purge Flag"
                return

        REM *************************************************************~
            *                     T E S T   D A T A                     *~
            *-----------------------------------------------------------*~
            * Test data for the items on Screen 1.                      *~
            *************************************************************

        deffn'156(fieldnr%)
            errormsg$ = " "
            on fieldnr% gosub L51200          /* Purge Flag             */
            return

            REM Test Data for Purge Flag
L51200:     p% = pos("YN" = purgeflag$)
            if p% <> 0% then return
                errormsg$ = "Enter 'Y' or 'N' for Purge Flag"
                return

        REM THISPROGRAMWASGENERATEDBYGENPGMAPROPRIETRYPRODUCTOFCAELUSASSO~
            *                          E X I T                          *~
            *-----------------------------------------------------------*~
            * Terminates execution (files closed automatically).        *~
            *-----------------------------------------------------------*~
            * THIS PROGRAM CONTAINS VALUABLE TRADE SECRETS AND PROPRIE- *~
            * TARY ASSETS OF CAELUS ASSOCIATES, INC., SPOKANE, WA, EM-  *~
            * BODYING SUBSTANTIAL CREATIVE EFFORTS  AND CONFIDENTIAL    *~
            * INFORMATION.  UNAUTHORIZED USE, COPYING, DECOMPILING,     *~
            * TRANSLATING, DISCLOSURE, OR TRANSFER OF IT IS PROHIBITED. *~
            * COPYRIGHT (C) 1986  AN UNPUBLISHED WORK BY CAELUS ASSSO-  *~
            * CIATES, INC., SPOKANE, WA.  ALL RIGHTS RESERVED.          *~
            CAELUSASSOCIATESSPOKANEWASHINGTONALLRIGHTSRESERVEDCAELUSASSOC

        exit_program

            end
